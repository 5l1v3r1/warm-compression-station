component (Propagation=blocks) HeatEx4_0011
%     HX4_0011
%
%     This component is a three branches cross-current heat Exchanger
%     
%     The following variables are imposed to others components: 
%     - in1/2 node : pressure and enthalpy 
%     - out1/2 node : flow rate 
%     - in3/4 node : enthalpy and flow rate 
%     - out3/4 node : pressure 
%
%     To ensure compilation, the heat Exchanger must be connected
%     to components nodes that impose: 
%     - pressure and enthalpy on the in1/2 node 
%     - flowrate on the out1/2 node 
%     - flowrate and enthalpy on the in3/4 node 
%     - pressure on the out3/4 node 
%     
%     Note : the initial temperature/flowrate/presure conditions should
%     be equal to the actual value on the scheme (especially for heat
%     exchangers connected to sources).
%     
%     All parameters must be positive     

    nodes        
        in4  = simCryogenics.fluid; % in4:bottom
        in3  = simCryogenics.fluid; % in3:bottom
        out2 = simCryogenics.fluid; % out2:bottom
        out1 = simCryogenics.fluid; % out1:bottom

        out4 = simCryogenics.fluid; % out4:top
        out3 = simCryogenics.fluid; % out3:top
        in2  = simCryogenics.fluid; % in2:top
        in1  = simCryogenics.fluid; % in1:top
    end
    
    parameters
        N     = { 8     , '1'       }; % Number of discrete elements
        Vh    = { 2.3e-3 , 'm^3'     }; % First passage volume
        Vm    = { 2.3e-3 , 'm^3'     }; % Second passage volume
        Vc    = { 2.3e-3 , 'm^3'     }; % Third passage volume
        Vvc   = { 2.3e-3 , 'm^3'     }; % Fourth passage volume
        M     = { 13     , 'kg'      }; % Heat exchanger mass
        Kh    = { 0      , 'bar*s/kg'}; % First passage pressure drop
        Km    = { 0      , 'bar*s/kg'}; % Second passage pressure drop
        Kc    = { 0      , 'bar*s/kg'}; % Third passage pressure drop
        Kvc   = { 0      , 'bar*s/kg'}; % Fourth passage pressure drop
        
        hh_m  = { 800    , 'J/s/K'   }; % Ex. coeff. between pass. 1 and 2
        hh_c  = { 800    , 'J/s/K'   }; % Ex. coeff. between pass. 1 and 3
        hh_vc = { 800    , 'J/s/K'   }; % Ex. coeff. between pass. 1 and 4
        hm_c  = { 800    , 'J/s/K'   }; % Ex. coeff. between pass. 2 and 3
        hm_vc = { 800    , 'J/s/K'   }; % Ex. coeff. between pass. 2 and 4
        hc_vc = { 800    , 'J/s/K'   }; % Ex. coeff. between pass. 3 and 4
        
        Th0 = { 10    , 'K'         }; % Initial in1 temperature
        Ph0 = { 16    , 'bar'       }; % Initial in1 pressure
        Mh0 = { 0.037 , 'kg/s'      }; % Initial out1 flowrate  
        
        Tm0 = { 4.5   , 'K'         }; % Initial in2 temperature
        Pm0 = { 1.1   , 'bar'       }; % Initial out2 pressure
        Mm0 = { 0.037 , 'kg/s'      }; % Initial in2 flowrate   
        
        Tc0 = { 4.5   , 'K'         }; % Initial in3 temperature
        Pc0 = { 1.1   , 'bar'       }; % Initial out3 pressure
        Mc0 = { 0.037 , 'kg/s'      }; % Initial in3 flowrate   
        
        Tvc0 = { 4.5   , 'K'         }; % Initial in4 temperature
        Pvc0 = { 1.1   , 'bar'       }; % Initial out4 pressure
        Mvc0 = { 0.037 , 'kg/s'      }; % Initial in4 flowrate      
  end
 
    parameters(Hidden=true)
        sensh  = { 0 , '1'   }; % Sens hot  flow      
        sensm  = { 0 , '1'   }; % Sens middle flow
        sensc  = { 1 , '1'   }; % Sens cold flow
        sensvc = { 1 , '1'   }; % Sens very cold flow
    end

    components (Hidden=true)
         e1 = simCryogenics.Elements.Tuy1D(V=Vh, M=M/4, K=Kh, N=N, sens=0 );
         e2 = simCryogenics.Elements.Tuy1D(V=Vm, M=M/4, K=Km, N=N, sens=0 );
         e3 = simCryogenics.Elements.Tuy1D(V=Vc, M=M/4, K=Kc, N=N, sens=1 );
         e4 = simCryogenics.Elements.Tuy1D(V=Vvc, M=M/4, K=Kvc, N=N, sens=1 );
         q1 = simCryogenics.Elements.HeatEx4_exchange_0011(hh_m=hh_m, hh_c=hh_c,  hh_vc=hh_vc, hm_c=hm_c, hm_vc=hm_vc, hc_vc=hc_vc, N=N);
    end

     function setup
        if N < 1 || N > 10,
            error('The number of elementary loop must be between 1 and 10');
        end

        if Vh <= 0 || Vm <= 0 || Vc <= 0 || M < 0 || Kh < 0 || Km < 0 || Kc < 0 || hm_c < 0|| hh_c < 0 || hh_m < 0
            error('All component phyical parameters must be positive');
        end
        
        if Ph0  < in1.P_min, error('Initial pressure of the first passage must be higher than P_min'); end
        if Pm0  < in2.P_min, error('Initial pressure of the second passage must be higher than P_min'); end
        if Pc0  < in3.P_min, error('Initial pressure of the third passage must be higher than P_min'); end    
        if Pvc0 < in4.P_min, error('Initial pressure of the fourth passage must be higher than P_min'); end    

        if Ph0  > in1.P_max, error('Initial pressure of the first passage must be lower than P_max'); end
        if Pm0  > in2.P_max, error('Initial pressure of the second passage must be lower than P_max'); end    
        if Pc0  > in3.P_max, error('Initial pressure of the third passage must be lower than P_max'); end 
        if Pvc0 > in4.P_max, error('Initial pressure of the fourth passage must be lower than P_max'); end  
        
        Hh0  = {hecalc(9,0,'T',value(Th0,'K'),'P' ,value(Ph0, 'Pa'),0)/1e3, 'kJ/kg'};
        Hm0  = {hecalc(9,0,'T',value(Tm0,'K'),'P' ,value(Pm0, 'Pa'),0)/1e3, 'kJ/kg'};
        Hc0  = {hecalc(9,0,'T',value(Tc0,'K'),'P' ,value(Pc0, 'Pa'),0)/1e3, 'kJ/kg'};
        Hvc0 = {hecalc(9,0,'T',value(Tvc0,'K'),'P',value(Pvc0,'Pa'),0)/1e3, 'kJ/kg'};
        
        if Hh0  < in1.H_min, error('Initial enthalpy of the first passage must be higher than H_min'); end
        if Hm0  < in2.H_min, error('Initial enthalpy of the second passage must be higher than H_min'); end    
        if Hc0  < in3.H_min, error('Initial enthalpy of the third passage must be higher than H_min'); end    
        if Hvc0 < in4.H_min, error('Initial enthalpy of the fourth passage must be higher than H_min'); end  
        
        if Hh0  > in1.H_max, error('Initial enthalpy of the first passage must be lower than H_max'); end
        if Hm0  > in2.H_max, error('Initial enthalpy of the second passage must be lower than H_max'); end    
        if Hc0  > in3.H_max, error('Initial enthalpy of the third passage must be lower than H_max'); end 
        if Hvc0 > in4.H_max, error('Initial enthalpy of the fourth passage must be lower than H_max'); end  
        
        if Mh0  < 0, error('Initial flowrate in the first passage must be greater than 0'); end        
        if Mm0  < 0, error('Initial flowrate in the second passage must be greater than 0'); end    
        if Mc0  < 0, error('Initial flowrate in the third passage must be greater than 0'); end     
        if Mvc0 < 0, error('Initial flowrate in the fourth passage must be greater than 0'); end
        
        Hh0v = value(Hh0,'J/kg');     Hm0v = value(Hm0,'J/kg');     Hc0v = value(Hc0,'J/kg');     Hvc0v = value(Hvc0,'J/kg');
        Mh0v = value(Mh0,'kg/s');     Mm0v = value(Mm0,'kg/s');     Mc0v = value(Mc0,'kg/s');     Mvc0v = value(Mvc0,'kg/s');
        Ph0v = value(Ph0,'bar');      Pm0v = value(Pm0,'bar');      Pc0v = value(Pc0,'bar');      Pvc0v = value(Pvc0,'bar');
        Nv = value(N,'1');
        Vhv = value(Vh,'m^3');        Vmv = value(Vm,'m^3');        Vcv = value(Vc,'m^3');        Vvcv = value(Vvc,'m^3');
        hh_mv = value(hh_m,'W/K');    hh_cv = value(hh_c,'W/K');    hh_vcv = value(hh_vc,'W/K');
        hm_cv = value(hm_c,'W/K');    hm_vcv = value(hm_vc,'W/K');  hc_vcv = value(hc_vc,'W/K');
        senshv = value(sensh,'1');    sensmv = value(sensm,'1');    senscv = value(sensc,'1');    sensvcv = value(sensvc,'1');
        Mv = value(M,'kg');
        gas1 = value(in1.gas,'1');    gas2 = value(in2.gas,'1');    gas3 = value(in3.gas,'1');    gas4 = value(in4.gas,'1');
        
        f = @(Ht)ex_multizone_conti_centree_der_4b( Hh0v,Hm0v,Hc0v,Hvc0v,Mh0v,Mm0v,Mc0v,Mvc0v,Ph0v,Pm0v,Pc0v,Pvc0v,...
                    Nv,Vhv,Vmv,Vcv,Vvcv,hh_mv,hh_cv,hh_vcv,hm_cv,hm_vcv,hc_vcv,senshv,sensmv,senscv,sensvcv,Mv,Ht);
                                                 
        H(1:4:4*Nv,1) = linspace(Hh0v  , Hc0v+0.5, Nv)'; % init guess
        H(2:4:4*Nv,1) = linspace(Hh0v  , Hm0v,     Nv)';
        H(3:4:4*Nv,1) = linspace(Hh0v-1, Hc0v,     Nv)';
        H(4:4:4*Nv,1) = linspace(Hh0v-1, Hc0v,     Nv)'; 

        opt = optimset('Display','off','TolFun',1e-10,'TolX',1e-10);
        H   = fsolve(f,H,opt);

        if (sensh == 0), HHout = {[H(1:4:end-3); zeros(10-value(N,'1'),1)], 'J/kg'};
        else, HHout = {[H(end-3:-4:1); zeros(10-value(N,'1'),1)], 'J/kg'}; end
        if (sensm == 0), HMout = {[H(2:4:end-2); zeros(10-value(N,'1'),1)], 'J/kg'};
        else, HMout = {[H(end-2:-4:2); zeros(10-value(N,'1'),1)], 'J/kg'}; end
        if (sensc == 0), HCout = {[H(3:4:end-1); zeros(10-value(N,'1'),1)], 'J/kg'};
        else, HCout = {[H(end-1:-4:3); zeros(10-value(N,'1'),1)], 'J/kg'}; end
        if (sensvc == 0), HVCout = {[H(4:4:end); zeros(10-value(N,'1'),1)], 'J/kg'};
        else, HVCout = {[H(end:-4:4); zeros(10-value(N,'1'),1)], 'J/kg'}; end
        
        e1.Hout0 = HHout;
        e2.Hout0 = HMout;
        e3.Hout0 = HCout;
        e4.Hout0 = HVCout;
     end
     
     connections
        connect(in1, e1.in1);	connect(e1.out1, out1) ;
        connect(in2, e2.in1);	connect(e2.out1, out2) ; 
        connect(out3, e3.out1);	connect(e3.in1, in3) ; 
        connect(out4, e4.out1);	connect(e4.in1, in4) ; 
        
        connect(q1.Qh, e1.Q)
        connect(q1.Qm, e2.Q) 
        connect(q1.Qc, e3.Q) 
        connect(q1.Qvc, e4.Q) 
        
       	connect(e1.T, q1.Th)
        connect(e2.T, q1.Tm) 
        connect(e3.T, q1.Tc)
        connect(e4.T, q1.Tvc)
     end
end