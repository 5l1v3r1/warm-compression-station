component Turbine_p
    % Turbine_p : 2
    %
    % This component is a cryogenic Turbine with constant 
    % or variable isentropic efficiency. It impose the
    % flowrate on both its inlet and oulet port.
    % The outlet port also impose the temperature.
    % 
    % To ensure compilation, this component inlet port must
    % be connected to a component port that impose both 
    % temperature and pressure. The oulet port must be  
    % connected to a component port that impose pressure.
    % 
    % All parameters must be positive and eta0 must be in
    % the [0 1] interval. the parameter cst_eff is boolean.
    %
    nodes
        in1  = simCryogenics.fluid; % in:left
        out1 = simCryogenics.fluid; % out:right
    end
        
    parameters
        A       = { 5e-6    , 'm^2' };	% Section pass
        D       = { 0.0255  , 'm'   };	% Blade diameter
        Mass    = { 0.02    , 'kg'  }	% Shaft mass
        cst_eff = { 0       , '1'   };	% Constant efficiency

        eta0  = { 0.8     , '1'  };    % Nominal efficiency      
        Tin0  = { 20      , 'K'  };    % Nominal inlet temperature
        Pin0  = { 16      , 'bar'  };  % Nominal inlet pressure
        Pout0 = { 1.2     , 'bar'  };  % Nominal outlet pressure
        N0    = { 2250    , '1/s' };  % Nominal speed 
    end
    
    parameters (Hidden = true)
        Q0 = { 0 , 'W' }; % 
        v0      = { 0, '1'         }; % velocities ratio
        I = { 0 , 'kg*m^2' }; % 
    end


    variables (Hidden = true)
        gamma   = { 0, '1'         }; % specific heat ratio
        C       = { 0, '1'         }; % helium constant
        Z       = { 0, '1'         }; % compression factor
        Cp      = { 0, 'kJ/kg/K'    }; % specific heat
        Sin     = { 0, 'kJ/kg'      }; % entropy
        T       = { 0, 'K'         }; % Temperature
        HoutIs  = { 0, 'kJ/kg'      }; % Isentropic enthalpy      
        u1      = { 0, 'm/s'        }; % jet velocity
        c1      = { 0, 'm/s'       }; % blade velocity
        v       = { 0, '1'         }; % velocities ratio
        eta     = { 0, '1'         }; % Efficiency 
        eta_var = { 0, '1'         }; % Efficiency 
        N       = { 0 , 'rad/s' }; %
        Q       = { 0 , 'W' }; %         
    end
    
    components (Hidden=true)
        v1 = simCryogenics.Utilities.verif;
        v2 = simCryogenics.Utilities.verif;
    end   
    
    function setup
        if A <= 0, error('Section of the turbine must be greater than zero');  end
        if D <= 0, error('Diameter of the turbine must be greater than zero'); end
        if eta0 <= 0, error('Normal efficiency of the turbine must be greater than zero'); end
        if eta0 >1, error('Normal efficiency can''t be greater than 1'); end
        
        % he prpts at nominal point
        Mol    = 4.0026e-3;
        R      = 8.3144621;
       
        Hin0    = hecalc(9, 0, 'T', value(Tin0,'K'), 'P', value(Pin0,'Pa') , 0);
        Sin0    = hecalc(8, 0, 'T', value(Tin0,'K'), 'P', value(Pin0,'Pa') , 0);
        Hout0is = hecalc(9, 0, 8  , Sin0           , 'P', value(Pout0,'Pa'), 0);

        gamma0  = hecalc(16,0,'T',value(Tin0,'K'),'P',value(Pin0,'Pa'),0);
        Z0      = hecalc(5 ,0,'T',value(Tin0,'K'),'P',value(Pin0,'Pa'),0);
        
        % flowrate design
        C0 = sqrt(gamma0*(2/(gamma0+1))^((gamma0+1)/(gamma0-1)));
        M0 = C0*value(Pin0,'Pa')*value(A,'m^2')/sqrt(Z0*R*value(Tin0,'K')/Mol);
        
        % nominal output enthalpy
        Hout0 = Hin0*(1-value(eta0,'1'))+value(eta0,'1')*Hout0is;
        Q0 = {(Hin0-Hout0)*M0,'W'};
        
        % nominal speed
        N = N0;
        
        % norminal efficiency
        eta_var = eta0;
        
        % nominal speed ratio
        u10 = pi*value(D,'m')*value(N0,'rad/s');
        c10 = sqrt(2*(Hin0-Hout0is));
        v0 = u10/c10;
        
        % inertia calculation
        I = {value(Mass,'kg')*(value(D,'m')/2)^2/2, 'kg*m^2'};
    end
    
    connections
        connect(in1,  v1.in1);
        connect(out1, v2.in1);
    end  
    
    equations
        % he parameters with H and P inputs
        gamma  == tablelookup(in1.P_P_H, in1.H_P_H, in1.gamma_P_H, in1.P, in1.H, interpolation=linear, extrapolation=nearest);
        Z      == tablelookup(in1.P_P_H, in1.H_P_H, in1.Z_P_H    , in1.P, in1.H, interpolation=linear, extrapolation=nearest);
        Sin    == tablelookup(in1.P_P_H, in1.H_P_H, in1.S_P_H    , in1.P, in1.H, interpolation=linear, extrapolation=nearest);
        Cp     == tablelookup(in1.P_P_H, in1.H_P_H, in1.Cp_P_H   , in1.P, in1.H, interpolation=linear, extrapolation=nearest);
        T      == tablelookup(in1.P_P_H, in1.H_P_H, in1.T_P_H    , in1.P, in1.H, interpolation=linear, extrapolation=nearest);
        
        % he parameters with P and S inputs
        HoutIs == tablelookup(in1.P_P_S, in1.S_P_S, in1.H_P_S    , out1.P, Sin , interpolation=linear, extrapolation=nearest);
        
        % Others equations
        % flowrate
        C      == sqrt(gamma*(2/(gamma+1))^((gamma+1)/(gamma-1)));
        in1.M  == out1.M;
        Q == (in1.H-out1.H)*out1.M;
        
        % efficiency and speeds
        N.der  == (Q-Q0*(N/N0)^3)/(I*N);
        u1     == pi*N*D;
        if (in1.H-HoutIs)>0
            c1     == sqrt(2*(in1.H-HoutIs));
            out1.M == C*in1.P*A/sqrt(Z*in1.R*T/in1.Mol);
            v      == u1/c1;
        else
            c1 == 0;
            out1.M == 0;
            v      == v0;
        end
        
        if (cst_eff ==1)
            eta == eta0;
        else
            eta == eta_var;
        end
        
        eta_var.der == (eta0*(2*v/v0-(v/v0)^2) - eta)/{0.01,'s'};
       
        %output enthalpy
        out1.H == in1.H*(1-eta)+eta*HoutIs;
       
    end
end