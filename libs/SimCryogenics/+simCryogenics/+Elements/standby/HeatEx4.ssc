component HeatEx4
%     HeatEx4 : 4
%     
%     This component is a two flows cross current heat Exchanger
%     
%     The following variables are imposed to others components:
%       - Hot inlet port : flow rate
%       - Hot outlet port : both pressure and temperature 
%       - Cold inlet port : both temperature and flow rate
%       - Cold outlet port : pressure
   
    nodes        
        LeftH   = simCryogenics.fluid;  % leftH:bottom
        RightH  = simCryogenics.fluid;  % rightH:top
        LeftM   = simCryogenics.fluid ; % leftM:bottom
        RightM  = simCryogenics.fluid ; % rightM:top
        LeftC   = simCryogenics.fluid;  % leftC:bottom
        RightC  = simCryogenics.fluid;  % rightC:top
        LeftVC  = simCryogenics.fluid;  % leftVC:bottom
        RightVC = simCryogenics.fluid;  % rightVC:top
    end

 parameters
        N   = { 8     , '1'       }; % Number of elementary loop
        Vh  = { 2.3e-3, 'm^3'     }; % Hot pipe volume
        Vm = { 2.3e-3, 'm^3'     }    % Middle pipe volume
        Vc  = { 2.3e-3, 'm^3'     }; % Very Cold pipe volume
        Vvc  = { 2.3e-3, 'm^3'     }; % Cold pipe volume
        M   = { 13    , 'kg'      }; % Masse of the aluminium
        Kh  = { 0   , 'bar*s/kg'}; % Drop in the hot pipe
        Km =  { 0   , 'bar*s/kg'}; % Dop in the middle pipe
        Kc  = { 0  , 'bar*s/kg'}; % Drop in the cold pipe
        Kvc  = { 0  , 'bar*s/kg'}; % Drop in the very cold pipe
        hh_m   = { 800   , 'J/s/K'   }; % Exchange coefficient between the hot pipe and the middle pipe
        hh_c   = { 800   , 'J/s/K'   }; % Exchange coefficient between the hot pipe and the cold pipe
        hh_vc   = { 800   , 'J/s/K'   }; % Exchange coefficient between the hot pipe and the very cold pipe
        hm_c   = { 800   , 'J/s/K'   }; % Exchange coefficient between the middle pipe and thecold pipe
        hm_vc   = { 800   , 'J/s/K'   }; % Exchange coefficient between the middle pipe and the very cold pipe
        hc_vc   = { 800   , 'J/s/K'   }; % Exchange coefficient between the cold pipe and the very cold pipe
        Ph0 = { 16    , 'bar'     }; % Initial hot pressure
        Th0 = { 10    , 'K'       }; % Initial hot temperature
        Pm0 = { 10    , 'bar'     }; % Initial middle pressure
        Tm0 = { 7    , 'K'       }; % Initial middle temperature
        Pc0 = { 1.1   , 'bar'     }; % Initial cold pressure
        Tc0 = { 4.5   , 'K'       }; % Initial cold temperature
        Pvc0 = { 1.1   , 'bar'     }; % Initial very cold pressure
        Tvc0 = { 4   , 'K'       }; % Initial very cold temperature
        Mh0 = { 0.037 , 'kg/s'    }; % Initial hot mass flow
        Mm0 = { 0.037 , 'kg/s'    }; % Initial middle mass flow
        Mc0 = { 0.037 , 'kg/s'    }; % Initial cold mass flow 
        Mvc0 = { 0.037 , 'kg/s'    }; % Initial very cold mass flow 
        sensh = { 0 , '1'    }; % Sens hot  flow      
        sensm = { 0 , '1'    }; % Sens middle flow
        sensc = { 1 , '1'    }; % Sens cold flow
        sensvc = { 1 , '1'    }; % Sens very cold flow
 end
    
variables 
         % For the calculation of the temperature
        rhoH_H  = { zeros(8,1), 'kg/m^3'};
        rhoM_H  = { zeros(8,1), 'kg/m^3'};
        rhoC_H  = { zeros(8,1), 'kg/m^3'};
        rhoVC_H  = { zeros(8,1), 'kg/m^3'};
        
        % For the calculation of the mass flow
        rhoH_M = { zeros(9,1), 'kg/m^3'};
        rhoM_M = { zeros(9,1), 'kg/m^3'};
        rhoC_M = { zeros(9,1), 'kg/m^3'};
        rhoVC_M = { zeros(9,1), 'kg/m^3'};
               
        THout  = { zeros(9,1), 'K'     };
        TMout  = { zeros(9,1), 'K'     };
        TCout  = { zeros(9,1), 'K'     };
        TVCout  = { zeros(9,1), 'K'     };
        
        THoutbs  = { zeros(9,1), 'K'     };
        TMoutbs  = { zeros(9,1), 'K'     };
        TCoutbs  = { zeros(9,1), 'K'     };
        TVCoutbs  = { zeros(9,1), 'K'     };
        
        HHout  = { zeros(8,1), 'J/kg'  };
        HMout  = { zeros(8,1), 'J/kg'  };
        HCout  = { zeros(8,1), 'J/kg'  };
        HVCout = { zeros(8,1), 'J/kg'  };
        
        HHin  = { zeros(1,1), 'J/kg'  };
        HMin  = { zeros(1,1), 'J/kg'  };
        HCin  = { zeros(1,1), 'J/kg'  };
        HVCin = { zeros(1,1), 'J/kg'  };
        
        Q1      = { zeros(8,1), 'J/s'   };
        Q2      = { zeros(8,1), 'J/s'   };
        Q3      = { zeros(8,1), 'J/s'   }; 
        Q4      = { zeros(8,1), 'J/s'   };
        Q5      = { zeros(8,1), 'J/s'   };
        Q6      = { zeros(8,1), 'J/s'   };
        
        Qh    = { zeros(8,1), 'J/s'   };
        Qm    = { zeros(8,1), 'J/s'   };
        Qc    = { zeros(8,1), 'J/s'   };  
        Qvc   = { zeros(8,1), 'J/s'   };  
        
        CpH    = { zeros(8,1), 'J/kg/K'};
        CpM    = { zeros(8,1), 'J/kg/K'};
        CpC    = { zeros(8,1), 'J/kg/K'};
        CpVC   = { zeros(8,1), 'J/kg/K'};
        
        Cpalu  = { zeros(8,1), 'J/kg/K'};
        
        dmh    = { zeros(8,1), 'kg/s'  };
        dmm    = { zeros(8,1), 'kg/s'  };
        dmc    = { zeros(8,1), 'kg/s'  };
        dmvc   = { zeros(8,1), 'kg/s'  };
        
        Mh     = { zeros(8,1), 'kg/s'  };
        Mm     = { zeros(8,1), 'kg/s'  };
        Mc     = { zeros(8,1), 'kg/s'  };
        Mvc     = { zeros(8,1), 'kg/s'  };
        
        
        Ph     = { zeros(8,1), 'bar'   };
        Pm     = { zeros(8,1), 'bar'   };
        Pc     = { zeros(8,1), 'bar'   };
        Pvc    = { zeros(8,1), 'bar'   };
        

        Cst    = { 1, '1' }; % Constant for reduce the beginning derivate
end
    
    function setup
        if N <= 0, error('discretization must be greater than zero'); end
        if Vh <= 0, error('Hot pipe volume must be greater than zero'); end  
        if Vm <= 0, error('Middle pipe volume must be greater than zero');end
        if Vc <= 0, error('Cold pipe volume must be greater than zero'); end 
        if Vvc <= 0, error('Very Cold pipe volume must be greater than zero'); end
        if M <= 0, error('Mass of aluminium must be greater than zero');  end
        if Kh < 0, error('The loss of load coefficient in the hot pipe must be greater than zero or equal');end
        if Km < 0, error('The loss of load coefficient in the middle pipe must be greater than zero or equal'); end
        if Kc < 0,  error('The loss of load coefficient in the cold pipe must be greater than zero or equal');end
        if Kvc < 0, error('The loss of load coefficient in the very cold pipe must be greater than zero or equal');end
        if hh_m <= 0, error('Exchange coefficiant between hot and middle pipes must be greater than 0');end
        if hh_c <= 0, error('Exchange coefficiant between hot and cold pipes must be greater than 0');end
        if hh_vc <= 0, error('Exchange coefficiant between hot and very cold pipes must be greater than 0');end      
        if hm_c <= 0, error('Exchange coefficiant between middle and cold pipes must be greater than 0');end
        if hm_vc <= 0, error('Exchange coefficiant between middle and very cold pipes must be greater than 0');end
        if hc_vc <= 0, error('Exchange coefficiant between cold and very cold pipes must be greater than 0');end           
        if Ph0 <= 0, error('Initial pressure of the hot pipe must be greater than 0'); end       
        if Pm0 <= 0, error('Initial pressure of the middle pipe must be greater than 0');  end          
        if Pc0 <= 0, error('Initial pressure of the cold pipe must be greater than 0'); end   
        if Pvc0 <= 0, error('Initial pressure of the very cold pipe must be greater than 0'); end      
        if Mh0 <= 0, error('Initial flow rate in the hot pipe must be greater than 0');end                
        if Mm0 <= 0, error('Initial flow rate in the middle pipe must be greater than 0');   end       
        if Mc0 <= 0,  error('Initial flow rate in the cold pipe must be greater than 0');end  
        if Mvc0 <= 0, error('Initial flow rate in the very cold pipe must be greater than 0');end       
        if sensh ~= 0 && sensh ~=1, error('Sensh must be 1 or 0'); end  
        if sensm ~= 0 && sensm ~=1, error('Sensm must be 1 or 0');end               
        if sensc ~= 0 && sensc ~=1, error('Sensc must be 1 or 0'); end
        if sensvc ~= 0 && sensvc ~=1, error('Sensvc must be 1 or 0'); end
    
  f = @(Tt)ex_multizone_conti_centree_der_4b(value(Th0,'K'),...
                                            value(Tm0,'K'),...
                                            value(Tc0,'K'),...
                                            value(Tvc0,'K'),...
                                            value(Mh0,'kg/s'),...
                                            value(Mm0,'kg/s'),...
                                            value(Mc0,'kg/s'),...
                                            value(Mvc0,'kg/s'),...
                                            value(Ph0,'bar'),...
                                            value(Pm0,'bar'),...
                                            value(Pc0,'bar'),...
                                            value(Pvc0,'bar'),...
                                            value(N,'1'),...
                                            value(Vh,'m^3'),...
                                            value(Vm,'m^3'),...
                                            value(Vc,'m^3'),...
                                            value(Vvc,'m^3'),...
                                            value(hh_m,'W/K'),...
                                            value(hh_c,'W/K'),...
                                            value(hh_vc,'W/K'),...
                                            value(hm_c,'W/K'),...
                                            value(hm_vc,'W/K'),...
                                            value(hc_vc,'W/K'),...
                                            value(sensh,'1'),...
                                            value(sensm,'1'),...
                                            value(sensc,'1'),...
                                            value(sensvc,'1'),...
                                            value(M,'kg'),Tt);
                                        
        T(1:4:4*value(N,'1'),1) = linspace(value(Th0,'K')  ,value(Tc0,'K')+0.5,value(N,'1'))'; % init guess Th
        T(2:4:4*value(N,'1'),1) = linspace(value(Th0,'K') ,value(Tm0,'K'),value(N,'1'))'; % init guess Tm
        T(3:4:4*value(N,'1'),1) = linspace(value(Th0,'K')-1,value(Tc0,'K'),value(N,'1'))'; % init guess Tc  
        T(4:4:4*value(N,'1'),1) = linspace(value(Th0,'K')-1,value(Tvc0,'K'),value(N,'1'))'; % init guess Tvc  
           
        opt = optimset('Display','off','TolFun',1e-10,'TolX',1e-10);
        T   = fsolve(f,T,opt);

        if (sensh == 0), HHout = {hecalc(9, 0, 'T', T(1:4:end-3) ,'P', value(Ph0,'Pa') , 0), 'J/kg'};
        else, HHout = {hecalc(9, 0, 'T', T(end-3:-4:1) ,'P', value(Ph0,'Pa') , 0), 'J/kg'}; end
        if (sensm == 0), HMout = {hecalc(9, 0, 'T', T(2:4:end-2) ,'P', value(Pm0,'Pa') , 0), 'J/kg'};
        else, HMout = {hecalc(9, 0, 'T', T(end-2:-4:2) ,'P', value(Pm0,'Pa') , 0), 'J/kg'}; end
        if (sensc == 0), HCout = {hecalc(9, 0, 'T', T(3:4:end-1),'P', value(Pc0,'Pa') , 0), 'J/kg'};
        else, HCout = {hecalc(9, 0, 'T', T(end-1:-4:3)   ,'P', value(Pc0,'Pa') , 0), 'J/kg'}; end
        if (sensvc == 0), HVCout = {hecalc(9, 0, 'T', T(4:4:end),'P', value(Pvc0,'Pa') , 0), 'J/kg'};
        else, HVCout = {hecalc(9, 0, 'T', T(end:-4:4)   ,'P', value(Pvc0,'Pa') , 0), 'J/kg'}; end
    end 
      
   
    
    equations
        
   
        if (sensh == 0) % hot pipe
            Ph(1)   == LeftH.P   - 0*Kh/N*Mh(8);
            Ph(2:8) == Ph(1:7) - 0*Kh/N*Mh(7:-1:1);
            LeftH.M  == Mh(8) ;
            RightH.P == Ph(8);
            THoutbs(1:9) == THout(1:9);
            Mh(1)   == RightH.M  + dmh(8);
            Mh(2:8) == Mh(1:7) + dmh(7:-1:1);
            Qh == -Q1(1:8) - Q2(1:8) -Q3(1:8);
            HHin == LeftH.H;
            RightH.H == HHout(8);
        else
            Ph(1)   == RightH.P  + 0*Kh/N*Mh(8);
            Ph(2:8) == Ph(1:7) + 0*Kh/N*Mh(7:-1:1);    
            RightH.M  == Mh(8);
            LeftH.P == Ph(8);
            THoutbs(1:9) == THout(9:-1:1);
            Mh(1)   == LeftH.M - dmh(1);
            Mh(2:8) == Mh(1:7)- dmh(2:8);
            Qh == -Q1(8:-1:1) - Q2(8:-1:1) - Q3(8:-1:1);
            HHin == RightH.H;
            LeftH.H == HHout(8)
        end

        % rhoH properties for the calculation of H hot
        rhoH_H(1)  == tablelookup(LeftH.P_P_H, LeftH.H_P_H, LeftH.rho_P_H , Ph(1), (HHin + HHout(1))/2, interpolation=linear);
        rhoH_H(2)  == tablelookup(LeftH.P_P_H, LeftH.H_P_H, LeftH.rho_P_H , Ph(2), (HHout(1) + HHout(2))/2, interpolation=linear);
        rhoH_H(3)  == tablelookup(LeftH.P_P_H, LeftH.H_P_H, LeftH.rho_P_H , Ph(3), (HHout(2) + HHout(3))/2, interpolation=linear);
        rhoH_H(4)  == tablelookup(LeftH.P_P_H, LeftH.H_P_H, LeftH.rho_P_H , Ph(4), (HHout(3) + HHout(4))/2, interpolation=linear);
        rhoH_H(5)  == tablelookup(LeftH.P_P_H, LeftH.H_P_H, LeftH.rho_P_H , Ph(5), (HHout(4) + HHout(5))/2, interpolation=linear);
        rhoH_H(6)  == tablelookup(LeftH.P_P_H, LeftH.H_P_H, LeftH.rho_P_H , Ph(6), (HHout(5) + HHout(6))/2, interpolation=linear);
        rhoH_H(7)  == tablelookup(LeftH.P_P_H, LeftH.H_P_H, LeftH.rho_P_H , Ph(7), (HHout(6) + HHout(7))/2, interpolation=linear);
        rhoH_H(8)  == tablelookup(LeftH.P_P_H, LeftH.H_P_H, LeftH.rho_P_H , Ph(8), (HHout(7) + HHout(8))/2, interpolation=linear);
        
        % rhoH properties for the calculation of M hot
        rhoH_M(1)  == tablelookup(LeftH.P_P_H, LeftH.H_P_H, LeftH.rho_P_H , Ph(1), HHin, interpolation=linear);
        rhoH_M(2)  == tablelookup(LeftH.P_P_H, LeftH.H_P_H, LeftH.rho_P_H , Ph(2), HHout(1), interpolation=linear);
        rhoH_M(3)  == tablelookup(LeftH.P_P_H, LeftH.H_P_H, LeftH.rho_P_H , Ph(3), HHout(2), interpolation=linear);
        rhoH_M(4)  == tablelookup(LeftH.P_P_H, LeftH.H_P_H, LeftH.rho_P_H , Ph(4), HHout(3), interpolation=linear);
        rhoH_M(5)  == tablelookup(LeftH.P_P_H, LeftH.H_P_H, LeftH.rho_P_H , Ph(5), HHout(4), interpolation=linear);
        rhoH_M(6)  == tablelookup(LeftH.P_P_H, LeftH.H_P_H, LeftH.rho_P_H , Ph(6), HHout(5), interpolation=linear);
        rhoH_M(7)  == tablelookup(LeftH.P_P_H, LeftH.H_P_H, LeftH.rho_P_H , Ph(7), HHout(6), interpolation=linear);
        rhoH_M(8)  == tablelookup(LeftH.P_P_H, LeftH.H_P_H, LeftH.rho_P_H , Ph(8), HHout(7), interpolation=linear);
        rhoH_M(9)  == tablelookup(LeftH.P_P_H, LeftH.H_P_H, LeftH.rho_P_H , Ph(8), HHout(8), interpolation=linear);

        % THout properties for the calculation of Q
        THout(1) == tablelookup(LeftH.P_P_H, LeftH.H_P_H, LeftH.T_P_H, Ph(1), HHin, interpolation = linear);
        THout(2) == tablelookup(LeftH.P_P_H, LeftH.H_P_H, LeftH.T_P_H, Ph(2), HHout(1), interpolation = linear);
        THout(3) == tablelookup(LeftH.P_P_H, LeftH.H_P_H, LeftH.T_P_H, Ph(3), HHout(2), interpolation = linear);
        THout(4) == tablelookup(LeftH.P_P_H, LeftH.H_P_H, LeftH.T_P_H, Ph(4), HHout(3), interpolation = linear);
        THout(5) == tablelookup(LeftH.P_P_H, LeftH.H_P_H, LeftH.T_P_H, Ph(5), HHout(4), interpolation = linear);
        THout(6) == tablelookup(LeftH.P_P_H, LeftH.H_P_H, LeftH.T_P_H, Ph(6), HHout(5), interpolation = linear);
        THout(7) == tablelookup(LeftH.P_P_H, LeftH.H_P_H, LeftH.T_P_H, Ph(7), HHout(6), interpolation = linear);
        THout(8) == tablelookup(LeftH.P_P_H, LeftH.H_P_H, LeftH.T_P_H, Ph(8), HHout(7), interpolation = linear);
        THout(9) == tablelookup(LeftH.P_P_H, LeftH.H_P_H, LeftH.T_P_H, Ph(8), HHout(8), interpolation = linear);

        % CpH properties for calculation of H hot
        CpH(1)   == tablelookup(LeftH.T_T_P, LeftH.P_T_P, LeftH.Cp_T_P  , (THout(1) + THout(2))/2, Ph(1), interpolation=linear);
        CpH(2)   == tablelookup(LeftH.T_T_P, LeftH.P_T_P, LeftH.Cp_T_P  , (THout(2) + THout(3))/2, Ph(2), interpolation=linear);
        CpH(3)   == tablelookup(LeftH.T_T_P, LeftH.P_T_P, LeftH.Cp_T_P  , (THout(3) + THout(4))/2, Ph(3), interpolation=linear);
        CpH(4)   == tablelookup(LeftH.T_T_P, LeftH.P_T_P, LeftH.Cp_T_P  , (THout(4) + THout(5))/2, Ph(4), interpolation=linear);
        CpH(5)   == tablelookup(LeftH.T_T_P, LeftH.P_T_P, LeftH.Cp_T_P  , (THout(5) + THout(6))/2, Ph(5), interpolation=linear);
        CpH(6)   == tablelookup(LeftH.T_T_P, LeftH.P_T_P, LeftH.Cp_T_P  , (THout(6) + THout(7))/2, Ph(6), interpolation=linear);
        CpH(7)   == tablelookup(LeftH.T_T_P, LeftH.P_T_P, LeftH.Cp_T_P  , (THout(7) + THout(8))/2, Ph(7), interpolation=linear);
        CpH(8)   == tablelookup(LeftH.T_T_P, LeftH.P_T_P, LeftH.Cp_T_P  , (THout(8) + THout(9))/2, Ph(8), interpolation=linear); 

        if (sensm == 0) % Middle Pipe  
            Pm(1)   == LeftM.P  - 0*Km/N*Mm(8);
            Pm(2:8) == Pm(1:7) - 0*Km/N*Mm(7:-1:1);
            LeftM.M == Mm(8);
            RightM.P  == Pm(8);
            TMoutbs(1:9) == TMout(1:9); 
            Mm(1)   == RightM.M  + dmm(8);
            Mm(2:8) == Mm(1:7) + dmm(7:-1:1);
            Qm == +Q1(1:8) - Q4(1:8) -Q5(1:8);
            HMin == LeftM.H;        
            RightM.H == HMout(8);
        else
            Pm(1)   == RightM.P  + 0*Km/N*Mm(8);
            Pm(2:8) == Pm(1:7) + 0*Km/N*Mm(7:-1:1);
            RightM.M == Mm(8);
            LeftM.P  == Pm(8);
            TMoutbs(1:9) == TMout(9:-1:1);
            Mm(1)   == LeftM.M  - dmm(1);
            Mm(2:8) == Mm(1:7)- dmm(2:8);
            Qm == +Q1(8:-1:1) - Q4(8:-1:1) - Q5(8:-1:1);   
            HMin == RightM.H;         
            LeftM.H == HMout(8);
        end
        
        
        
        % rhoM properties for the calculation of H middle
        rhoM_H(1)  == tablelookup(LeftM.P_P_H, LeftM.H_P_H, LeftM.rho_P_H , Pm(1), (HMin + HMout(1))/2, interpolation=linear);
        rhoM_H(2)  == tablelookup(LeftM.P_P_H, LeftM.H_P_H, LeftM.rho_P_H , Pm(2), (HMout(1) + HMout(2))/2, interpolation=linear);
        rhoM_H(3)  == tablelookup(LeftM.P_P_H, LeftM.H_P_H, LeftM.rho_P_H , Pm(3), (HMout(2) + HMout(3))/2, interpolation=linear);
        rhoM_H(4)  == tablelookup(LeftM.P_P_H, LeftM.H_P_H, LeftM.rho_P_H , Pm(4), (HMout(3) + HMout(4))/2, interpolation=linear);
        rhoM_H(5)  == tablelookup(LeftM.P_P_H, LeftM.H_P_H, LeftM.rho_P_H , Pm(5), (HMout(4) + HMout(5))/2, interpolation=linear);
        rhoM_H(6)  == tablelookup(LeftM.P_P_H, LeftM.H_P_H, LeftM.rho_P_H , Pm(6), (HMout(5) + HMout(6))/2, interpolation=linear);
        rhoM_H(7)  == tablelookup(LeftM.P_P_H, LeftM.H_P_H, LeftM.rho_P_H , Pm(7), (HMout(6) + HMout(7))/2, interpolation=linear);
        rhoM_H(8)  == tablelookup(LeftM.P_P_H, LeftM.H_P_H, LeftM.rho_P_H , Pm(8), (HMout(7) + HMout(8))/2, interpolation=linear);

        %rhoM properties for the calculation of M middle
        rhoM_M(1)  == tablelookup(LeftM.P_P_H, LeftM.H_P_H, LeftM.rho_P_H , Pm(1), HMin  , interpolation=linear);
        rhoM_M(2)  == tablelookup(LeftM.P_P_H, LeftM.H_P_H, LeftM.rho_P_H , Pm(2), HMout(1), interpolation=linear);
        rhoM_M(3)  == tablelookup(LeftM.P_P_H, LeftM.H_P_H, LeftM.rho_P_H , Pm(3), HMout(2), interpolation=linear);
        rhoM_M(4)  == tablelookup(LeftM.P_P_H, LeftM.H_P_H, LeftM.rho_P_H , Pm(4), HMout(3), interpolation=linear);
        rhoM_M(5)  == tablelookup(LeftM.P_P_H, LeftM.H_P_H, LeftM.rho_P_H , Pm(5), HMout(4), interpolation=linear);
        rhoM_M(6)  == tablelookup(LeftM.P_P_H, LeftM.H_P_H, LeftM.rho_P_H , Pm(6), HMout(5), interpolation=linear);
        rhoM_M(7)  == tablelookup(LeftM.P_P_H, LeftM.H_P_H, LeftM.rho_P_H , Pm(7), HMout(6), interpolation=linear);
        rhoM_M(8)  == tablelookup(LeftM.P_P_H, LeftM.H_P_H, LeftM.rho_P_H , Pm(8), HMout(7), interpolation=linear);
        rhoM_M(9)  == tablelookup(LeftM.P_P_H, LeftM.H_P_H, LeftM.rho_P_H , Pm(8), HMout(8), interpolation=linear);

        % TMout properties for the calculation of Q
        TMout(1) == tablelookup(LeftM.P_P_H, LeftM.H_P_H, LeftM.T_P_H, Pm(1), HMin   , interpolation = linear);
        TMout(2) == tablelookup(LeftM.P_P_H, LeftM.H_P_H, LeftM.T_P_H, Pm(2), HMout(1), interpolation = linear);
        TMout(3) == tablelookup(LeftM.P_P_H, LeftM.H_P_H, LeftM.T_P_H, Pm(3), HMout(2), interpolation = linear);
        TMout(4) == tablelookup(LeftM.P_P_H, LeftM.H_P_H, LeftM.T_P_H, Pm(4), HMout(3), interpolation = linear);
        TMout(5) == tablelookup(LeftM.P_P_H, LeftM.H_P_H, LeftM.T_P_H, Pm(5), HMout(4), interpolation = linear);
        TMout(6) == tablelookup(LeftM.P_P_H, LeftM.H_P_H, LeftM.T_P_H, Pm(6), HMout(5), interpolation = linear);
        TMout(7) == tablelookup(LeftM.P_P_H, LeftM.H_P_H, LeftM.T_P_H, Pm(7), HMout(6), interpolation = linear);
        TMout(8) == tablelookup(LeftM.P_P_H, LeftM.H_P_H, LeftM.T_P_H, Pm(8), HMout(7), interpolation = linear);
        TMout(9) == tablelookup(LeftM.P_P_H, LeftM.H_P_H, LeftM.T_P_H, Pm(8), HMout(8), interpolation = linear);

        %CpH properties for calculation of H middle
        CpM(1)   == tablelookup(LeftM.T_T_P, LeftM.P_T_P, LeftM.Cp_T_P  , (TMout(1) + TMout(2))/2, Pm(1), interpolation=linear);
        CpM(2)   == tablelookup(LeftM.T_T_P, LeftM.P_T_P, LeftM.Cp_T_P  , (TMout(2) + TMout(3))/2, Pm(2), interpolation=linear);
        CpM(3)   == tablelookup(LeftM.T_T_P, LeftM.P_T_P, LeftM.Cp_T_P  , (TMout(3) + TMout(4))/2, Pm(3), interpolation=linear);
        CpM(4)   == tablelookup(LeftM.T_T_P, LeftM.P_T_P, LeftM.Cp_T_P  , (TMout(4) + TMout(5))/2, Pm(4), interpolation=linear);
        CpM(5)   == tablelookup(LeftM.T_T_P, LeftM.P_T_P, LeftM.Cp_T_P  , (TMout(5) + TMout(6))/2, Pm(5), interpolation=linear);
        CpM(6)   == tablelookup(LeftM.T_T_P, LeftM.P_T_P, LeftM.Cp_T_P  , (TMout(6) + TMout(7))/2, Pm(7), interpolation=linear);
        CpM(7)   == tablelookup(LeftM.T_T_P, LeftM.P_T_P, LeftM.Cp_T_P  , (TMout(7) + TMout(8))/2, Pm(8), interpolation=linear);
        CpM(8)   == tablelookup(LeftM.T_T_P, LeftM.P_T_P, LeftM.Cp_T_P  , (TMout(8) + TMout(9))/2, Pm(8), interpolation=linear);            

        if (sensc == 0) % Cold Pipe
            Pc(1)   == LeftC.P  - 0*Kc/N*Mc(8);
            Pc(2:8) == Pc(1:7) - 0*Kc/N*Mc(7:-1:1);
            LeftC.M == Mc(8);
            RightC.P  == Pc(8);
            TCoutbs(1:9) == TCout(1:9);
            Mc(1)   == RightC.M  + dmc(8); 
            Mc(2:8) == Mc(1:7) + dmc(7:-1:1);
            Qc == +Q2(1:8) + Q4(1:8) - Q6(1:8);
            HCin == LeftC.H;
            RightC.H == HCout(8);
        else
            Pc(1)   == RightC.P  + 0*Kc/N*Mc(8);
            Pc(2:8) == Pc(1:7) + 0*Kc/N*Mc(7:-1:1);
            RightC.M == Mc(8);
            LeftC.P  == Pc(8);
            TCoutbs(1:9) == TCout(9:-1:1);
            Mc(1)   == LeftC.M  - dmc(1); 
            Mc(2:8) == Mc(1:7)- dmc(2:8);
            Qc == +Q2(8:-1:1) + Q4(8:-1:1) - Q6(8:-1:1);
            HCin == RightC.H;
            LeftC.H == HCout(8);
        end
        
        % rhoC properties for calculation of H cold
        rhoC_H(1)  == tablelookup(LeftC.P_P_H, LeftC.H_P_H, LeftC.rho_P_H, Pc(1), (HCin    + HCout(1))/2, interpolation=linear);
        rhoC_H(2)  == tablelookup(LeftC.P_P_H, LeftC.H_P_H, LeftC.rho_P_H, Pc(2), (HCout(1) + HCout(2))/2, interpolation=linear);
        rhoC_H(3)  == tablelookup(LeftC.P_P_H, LeftC.H_P_H, LeftC.rho_P_H, Pc(3), (HCout(2) + HCout(3))/2, interpolation=linear);
        rhoC_H(4)  == tablelookup(LeftC.P_P_H, LeftC.H_P_H, LeftC.rho_P_H, Pc(4), (HCout(3) + HCout(4))/2, interpolation=linear);
        rhoC_H(5)  == tablelookup(LeftC.P_P_H, LeftC.H_P_H, LeftC.rho_P_H, Pc(5), (HCout(4) + HCout(5))/2, interpolation=linear);
        rhoC_H(6)  == tablelookup(LeftC.P_P_H, LeftC.H_P_H, LeftC.rho_P_H, Pc(6), (HCout(5) + HCout(6))/2, interpolation=linear);
        rhoC_H(7)  == tablelookup(LeftC.P_P_H, LeftC.H_P_H, LeftC.rho_P_H, Pc(7), (HCout(6) + HCout(7))/2, interpolation=linear);
        rhoC_H(8)  == tablelookup(LeftC.P_P_H, LeftC.H_P_H, LeftC.rho_P_H, Pc(8), (HCout(7) + HCout(8))/2, interpolation=linear);

        % rhoC properties for calculation of M cold
        rhoC_M(1)  == tablelookup(LeftC.P_P_H, LeftC.H_P_H, LeftC.rho_P_H, Pc(1), HCin   , interpolation=linear);
        rhoC_M(2)  == tablelookup(LeftC.P_P_H, LeftC.H_P_H, LeftC.rho_P_H, Pc(2), HCout(1), interpolation=linear);
        rhoC_M(3)  == tablelookup(LeftC.P_P_H, LeftC.H_P_H, LeftC.rho_P_H, Pc(3), HCout(2), interpolation=linear);
        rhoC_M(4)  == tablelookup(LeftC.P_P_H, LeftC.H_P_H, LeftC.rho_P_H, Pc(4), HCout(3), interpolation=linear);
        rhoC_M(5)  == tablelookup(LeftC.P_P_H, LeftC.H_P_H, LeftC.rho_P_H, Pc(5), HCout(4), interpolation=linear);
        rhoC_M(6)  == tablelookup(LeftC.P_P_H, LeftC.H_P_H, LeftC.rho_P_H, Pc(6), HCout(5), interpolation=linear);
        rhoC_M(7)  == tablelookup(LeftC.P_P_H, LeftC.H_P_H, LeftC.rho_P_H, Pc(7), HCout(6), interpolation=linear);
        rhoC_M(8)  == tablelookup(LeftC.P_P_H, LeftC.H_P_H, LeftC.rho_P_H, Pc(8), HCout(7), interpolation=linear);
        rhoC_M(9)  == tablelookup(LeftC.P_P_H, LeftC.H_P_H, LeftC.rho_P_H, Pc(8), HCout(8), interpolation=linear);

        % TCout properties for the calculation of Q        
        TCout(1) == tablelookup(LeftC.P_P_H, LeftC.H_P_H, LeftC.T_P_H, Pc(1), HCin   , interpolation = linear);
        TCout(2) == tablelookup(LeftC.P_P_H, LeftC.H_P_H, LeftC.T_P_H, Pc(2), HCout(1), interpolation = linear);
        TCout(3) == tablelookup(LeftC.P_P_H, LeftC.H_P_H, LeftC.T_P_H, Pc(3), HCout(2), interpolation = linear);
        TCout(4) == tablelookup(LeftC.P_P_H, LeftC.H_P_H, LeftC.T_P_H, Pc(4), HCout(3), interpolation = linear);
        TCout(5) == tablelookup(LeftC.P_P_H, LeftC.H_P_H, LeftC.T_P_H, Pc(5), HCout(4), interpolation = linear);
        TCout(6) == tablelookup(LeftC.P_P_H, LeftC.H_P_H, LeftC.T_P_H, Pc(6), HCout(5), interpolation = linear);
        TCout(7) == tablelookup(LeftC.P_P_H, LeftC.H_P_H, LeftC.T_P_H, Pc(7), HCout(6), interpolation = linear);
        TCout(8) == tablelookup(LeftC.P_P_H, LeftC.H_P_H, LeftC.T_P_H, Pc(8), HCout(7), interpolation = linear);
        TCout(9) == tablelookup(LeftC.P_P_H, LeftC.H_P_H, LeftC.T_P_H, Pc(8), HCout(8), interpolation = linear);

        % CpC properties for calculation of T cold
        CpC(1)   == tablelookup(LeftC.T_T_P, LeftC.P_T_P, LeftC.Cp_T_P, (TCout(1) + TCout(2))/2, Pc(1), interpolation=linear);
        CpC(2)   == tablelookup(LeftC.T_T_P, LeftC.P_T_P, LeftC.Cp_T_P, (TCout(2) + TCout(3))/2, Pc(2), interpolation=linear);
        CpC(3)   == tablelookup(LeftC.T_T_P, LeftC.P_T_P, LeftC.Cp_T_P, (TCout(3) + TCout(4))/2, Pc(3), interpolation=linear);
        CpC(4)   == tablelookup(LeftC.T_T_P, LeftC.P_T_P, LeftC.Cp_T_P, (TCout(4) + TCout(5))/2, Pc(4), interpolation=linear);
        CpC(5)   == tablelookup(LeftC.T_T_P, LeftC.P_T_P, LeftC.Cp_T_P, (TCout(5) + TCout(6))/2, Pc(5), interpolation=linear);
        CpC(6)   == tablelookup(LeftC.T_T_P, LeftC.P_T_P, LeftC.Cp_T_P, (TCout(6) + TCout(7))/2, Pc(6), interpolation=linear);
        CpC(7)   == tablelookup(LeftC.T_T_P, LeftC.P_T_P, LeftC.Cp_T_P, (TCout(7) + TCout(8))/2, Pc(7), interpolation=linear);
        CpC(8)   == tablelookup(LeftC.T_T_P, LeftC.P_T_P, LeftC.Cp_T_P, (TCout(8) + TCout(9))/2, Pc(8), interpolation=linear);
        
        
        if (sensvc == 0) % Very Cold Pipe
            Pvc(1)   == LeftVC.P  - 0*Kvc/N*Mvc(8);
            Pvc(2:8) == Pvc(1:7) - 0*Kvc/N*Mvc(7:-1:1);
            LeftVC.M == Mvc(8);
            RightVC.P  == Pvc(8);
            TVCoutbs(1:9) == TVCout(1:9);
            Mvc(1)   == RightVC.M  + dmvc(8); 
            Mvc(2:8) == Mvc(1:7) + dmvc(7:-1:1);
            Qvc == +Q3(1:8) + Q5(1:8) + Q6(1:8);
            HVCin == LeftVC.H;
            RightVC.H == HVCout(8);
        else
            Pvc(1)   == RightVC.P  + 0*Kvc/N*Mvc(8);
            Pvc(2:8) == Pvc(1:7) + 0*Kvc/N*Mvc(7:-1:1);
            RightVC.M == Mvc(8);
            LeftVC.P  == Pvc(8);
            TVCoutbs(1:9) == TVCout(9:-1:1);
            Mvc(1)   == LeftVC.M  - dmvc(1); 
            Mvc(2:8) == Mvc(1:7)- dmvc(2:8);
            Qvc == +Q3(8:-1:1) + Q5(8:-1:1) + Q6(8:-1:1);
            HVCin == RightVC.H;
            LeftVC.H == HVCout(8);
        end
        
        % rhoC properties for calculation of H cold
        rhoVC_H(1)  == tablelookup(LeftVC.P_P_H, LeftVC.H_P_H, LeftVC.rho_P_H, Pvc(1), (HVCin    + HVCout(1))/2, interpolation=linear);
        rhoVC_H(2)  == tablelookup(LeftVC.P_P_H, LeftVC.H_P_H, LeftVC.rho_P_H, Pvc(2), (HVCout(1) + HVCout(2))/2, interpolation=linear);
        rhoVC_H(3)  == tablelookup(LeftVC.P_P_H, LeftVC.H_P_H, LeftVC.rho_P_H, Pvc(3), (HVCout(2) + HVCout(3))/2, interpolation=linear);
        rhoVC_H(4)  == tablelookup(LeftVC.P_P_H, LeftVC.H_P_H, LeftVC.rho_P_H, Pvc(4), (HVCout(3) + HVCout(4))/2, interpolation=linear);
        rhoVC_H(5)  == tablelookup(LeftVC.P_P_H, LeftVC.H_P_H, LeftVC.rho_P_H, Pvc(5), (HVCout(4) + HVCout(5))/2, interpolation=linear);
        rhoVC_H(6)  == tablelookup(LeftVC.P_P_H, LeftVC.H_P_H, LeftVC.rho_P_H, Pvc(6), (HVCout(5) + HVCout(6))/2, interpolation=linear);
        rhoVC_H(7)  == tablelookup(LeftVC.P_P_H, LeftVC.H_P_H, LeftVC.rho_P_H, Pvc(7), (HVCout(6) + HVCout(7))/2, interpolation=linear);
        rhoVC_H(8)  == tablelookup(LeftVC.P_P_H, LeftVC.H_P_H, LeftVC.rho_P_H, Pvc(8), (HVCout(7) + HVCout(8))/2, interpolation=linear);

        % rhoC properties for calculation of M cold
        rhoVC_M(1)  == tablelookup(LeftVC.P_P_H, LeftVC.H_P_H, LeftVC.rho_P_H, Pvc(1), HVCin   , interpolation=linear);
        rhoVC_M(2)  == tablelookup(LeftVC.P_P_H, LeftVC.H_P_H, LeftVC.rho_P_H, Pvc(2), HVCout(1), interpolation=linear);
        rhoVC_M(3)  == tablelookup(LeftVC.P_P_H, LeftVC.H_P_H, LeftVC.rho_P_H, Pvc(3), HVCout(2), interpolation=linear);
        rhoVC_M(4)  == tablelookup(LeftVC.P_P_H, LeftVC.H_P_H, LeftVC.rho_P_H, Pvc(4), HVCout(3), interpolation=linear);
        rhoVC_M(5)  == tablelookup(LeftVC.P_P_H, LeftVC.H_P_H, LeftVC.rho_P_H, Pvc(5), HVCout(4), interpolation=linear);
        rhoVC_M(6)  == tablelookup(LeftVC.P_P_H, LeftVC.H_P_H, LeftVC.rho_P_H, Pvc(6), HVCout(5), interpolation=linear);
        rhoVC_M(7)  == tablelookup(LeftVC.P_P_H, LeftVC.H_P_H, LeftVC.rho_P_H, Pvc(7), HVCout(6), interpolation=linear);
        rhoVC_M(8)  == tablelookup(LeftVC.P_P_H, LeftVC.H_P_H, LeftVC.rho_P_H, Pvc(8), HVCout(7), interpolation=linear);
        rhoVC_M(9)  == tablelookup(LeftVC.P_P_H, LeftVC.H_P_H, LeftVC.rho_P_H, Pvc(8), HVCout(8), interpolation=linear);

        % TCout properties for the calculation of Q        
        TVCout(1) == tablelookup(LeftVC.P_P_H, LeftVC.H_P_H, LeftVC.T_P_H, Pvc(1), HVCin   , interpolation = linear);
        TVCout(2) == tablelookup(LeftVC.P_P_H, LeftVC.H_P_H, LeftVC.T_P_H, Pvc(2), HVCout(1), interpolation = linear);
        TVCout(3) == tablelookup(LeftVC.P_P_H, LeftVC.H_P_H, LeftVC.T_P_H, Pvc(3), HVCout(2), interpolation = linear);
        TVCout(4) == tablelookup(LeftVC.P_P_H, LeftVC.H_P_H, LeftVC.T_P_H, Pvc(4), HVCout(3), interpolation = linear);
        TVCout(5) == tablelookup(LeftVC.P_P_H, LeftVC.H_P_H, LeftVC.T_P_H, Pvc(5), HVCout(4), interpolation = linear);
        TVCout(6) == tablelookup(LeftVC.P_P_H, LeftVC.H_P_H, LeftVC.T_P_H, Pvc(6), HVCout(5), interpolation = linear);
        TVCout(7) == tablelookup(LeftVC.P_P_H, LeftVC.H_P_H, LeftVC.T_P_H, Pvc(7), HVCout(6), interpolation = linear);
        TVCout(8) == tablelookup(LeftVC.P_P_H, LeftVC.H_P_H, LeftVC.T_P_H, Pvc(8), HVCout(7), interpolation = linear);
        TVCout(9) == tablelookup(LeftVC.P_P_H, LeftVC.H_P_H, LeftVC.T_P_H, Pvc(8), HVCout(8), interpolation = linear);

        % CpC properties for calculation of T cold
        CpVC(1)   == tablelookup(LeftVC.T_T_P, LeftVC.P_T_P, LeftVC.Cp_T_P, (TVCout(1) + TVCout(2))/2, Pvc(1), interpolation=linear);
        CpVC(2)   == tablelookup(LeftVC.T_T_P, LeftVC.P_T_P, LeftVC.Cp_T_P, (TVCout(2) + TVCout(3))/2, Pvc(2), interpolation=linear);
        CpVC(3)   == tablelookup(LeftVC.T_T_P, LeftVC.P_T_P, LeftVC.Cp_T_P, (TVCout(3) + TVCout(4))/2, Pvc(3), interpolation=linear);
        CpVC(4)   == tablelookup(LeftVC.T_T_P, LeftVC.P_T_P, LeftVC.Cp_T_P, (TVCout(4) + TVCout(5))/2, Pvc(4), interpolation=linear);
        CpVC(5)   == tablelookup(LeftVC.T_T_P, LeftVC.P_T_P, LeftVC.Cp_T_P, (TVCout(5) + TVCout(6))/2, Pvc(5), interpolation=linear);
        CpVC(6)   == tablelookup(LeftVC.T_T_P, LeftVC.P_T_P, LeftVC.Cp_T_P, (TVCout(6) + TVCout(7))/2, Pvc(6), interpolation=linear);
        CpVC(7)   == tablelookup(LeftVC.T_T_P, LeftVC.P_T_P, LeftVC.Cp_T_P, (TVCout(7) + TVCout(8))/2, Pvc(7), interpolation=linear);
        CpVC(8)   == tablelookup(LeftVC.T_T_P, LeftVC.P_T_P, LeftVC.Cp_T_P, (TVCout(8) + TVCout(9))/2, Pvc(8), interpolation=linear);

        Cpalu(1) == tablelookup(LeftH.Th_Tc, LeftH.Cpalum_Th_Tc, (THoutbs(1) + THoutbs(2) + TMoutbs(1) + TMoutbs(2) + TCoutbs(1) + TCoutbs(2) + TVCoutbs(1) + TVCoutbs(2))/8, interpolation=cubic);
        Cpalu(2) == tablelookup(LeftH.Th_Tc, LeftH.Cpalum_Th_Tc, (THoutbs(2) + THoutbs(3) + TMoutbs(2) + TMoutbs(3) + TCoutbs(2) + TCoutbs(3) + TVCoutbs(2) + TVCoutbs(3))/8, interpolation=cubic);
        Cpalu(3) == tablelookup(LeftH.Th_Tc, LeftH.Cpalum_Th_Tc, (THoutbs(3) + THoutbs(4) + TMoutbs(3) + TMoutbs(4) + TCoutbs(3) + TCoutbs(4) + TVCoutbs(3) + TVCoutbs(4))/8, interpolation=cubic);
        Cpalu(4) == tablelookup(LeftH.Th_Tc, LeftH.Cpalum_Th_Tc, (THoutbs(4) + THoutbs(5) + TMoutbs(4) + TMoutbs(5) + TCoutbs(4) + TCoutbs(5) + TVCoutbs(4) + TVCoutbs(5))/8, interpolation=cubic);
        Cpalu(5) == tablelookup(LeftH.Th_Tc, LeftH.Cpalum_Th_Tc, (THoutbs(5) + THoutbs(6) + TMoutbs(5) + TMoutbs(6) + TCoutbs(5) + TCoutbs(6) + TVCoutbs(5) + TVCoutbs(6))/8, interpolation=cubic);
        Cpalu(6) == tablelookup(LeftH.Th_Tc, LeftH.Cpalum_Th_Tc, (THoutbs(6) + THoutbs(7) + TMoutbs(6) + TMoutbs(7) + TCoutbs(6) + TCoutbs(7) + TVCoutbs(6) + TVCoutbs(7))/8, interpolation=cubic);
        Cpalu(7) == tablelookup(LeftH.Th_Tc, LeftH.Cpalum_Th_Tc, (THoutbs(7) + THoutbs(8) + TMoutbs(7) + TMoutbs(8) + TCoutbs(7) + TCoutbs(8) + TVCoutbs(7) + TVCoutbs(8))/8, interpolation=cubic);
        Cpalu(8) == tablelookup(LeftH.Th_Tc, LeftH.Cpalum_Th_Tc, (THoutbs(8) + THoutbs(9) + TMoutbs(8) + TMoutbs(9) + TCoutbs(8) + TCoutbs(9) + TVCoutbs(8) + TVCoutbs(9))/8, interpolation=cubic);

        Q1(1:8) == (THoutbs(1:8) + THoutbs(2:9) - TMoutbs(1:8) - TMoutbs(2:9))*hh_m/(2*N);
        Q2(1:8) == (THoutbs(1:8) + THoutbs(2:9) - TCoutbs(1:8) - TCoutbs(2:9))*hh_c/(2*N);
        Q3(1:8) == (THoutbs(1:8) + THoutbs(2:9) - TVCoutbs(1:8) - TVCoutbs(2:9))*hh_vc/(2*N);
        Q4(1:8) == (TMoutbs(1:8) + TMoutbs(2:9) - TCoutbs(1:8) - TCoutbs(2:9))*hm_c/(2*N);
        Q5(1:8) == (TMoutbs(1:8) + TMoutbs(2:9) - TVCoutbs(1:8) - TVCoutbs(2:9))*hm_vc/(2*N);
        Q6(1:8) == (TCoutbs(1:8) + TCoutbs(2:9) - TVCoutbs(1:8) - TVCoutbs(2:9))*hc_vc/(2*N);

        HHout(1:8).der == N*(RightH.M*([HHin;HHout(1:7)] - HHout(1:8)) + Qh)./(rhoH_H(1:8) * Vh + M*Cpalu(8:-1:1)./(2*CpH(1:8)));
        HMout(1:8).der == N*(RightM.M*([HMin;HMout(1:7)] - HMout(1:8)) + Qm)./(rhoM_H(1:8) * Vm + M*Cpalu(8:-1:1)./(2*CpM(1:8))); 
        HCout(1:8).der == N*(RightC.M*([HCin;HCout(1:7)] - HCout(1:8)) + Qc)./(rhoC_H(1:8) * Vc + M*Cpalu(8:-1:1)./(2*CpC(1:8)));
        HVCout(1:8).der == N*(RightVC.M*([HVCin;HVCout(1:7)] - HVCout(1:8)) + Qvc)./(rhoVC_H(1:8) * Vvc + M*Cpalu(8:-1:1)./(2*CpVC(1:8)));

       if(time<{10,'s'})
            Cst == time/{10,'s'};
       else
            Cst == 1;
       end

        dmh(1:8) == 0*Cst*(rhoH_M(2:9) - rhoH_M(1:8))./(HHout(1:8) - [HHin;HHout(1:7)]) * Vh.* (RightH.M*([HHin;HHout(1:7)] - HHout(1:8)) - Q1(1:8) -    Q2(1:8)-    Q3(1:8))  ./(rhoH_H(1:8) * Vh + M*Cpalu(1:8)   ./(2*CpH(1:8)));
        dmm(1:8) == 0*Cst*(rhoM_M(2:9) - rhoM_M(1:8))./(HMout(1:8) - [HMin;HMout(1:7)]) * Vm.* (RightM.M*([HMin;HMout(1:7)] - HMout(1:8)) - Q4(8:-1:1)- Q5(8:-1:1) + Q1(8:-1:1))./(rhoM_H(1:8) * Vm + M*Cpalu(8:-1:1)./(2*CpM(1:8)));        
        dmc(1:8) == 0*Cst*(rhoC_M(2:9) - rhoC_M(1:8))./(HCout(1:8) - [HCin;HCout(1:7)]) * Vc.* (RightC.M*([HCin;HCout(1:7)] - HCout(1:8)) + Q2(8:-1:1)- Q6(8:-1:1) + Q4(8:-1:1))./(rhoC_H(1:8) * Vc + M*Cpalu(8:-1:1)./(2*CpC(1:8)));
        dmvc(1:8) == 0*Cst*(rhoVC_M(2:9) - rhoVC_M(1:8))./(HVCout(1:8) - [HVCin;HVCout(1:7)]) * Vvc.* (RightVC.M*([HVCin;HVCout(1:7)] - HVCout(1:8)) + Q3(8:-1:1) + Q6(8:-1:1) + Q5(8:-1:1))./(rhoC_H(1:8) * Vc + M*Cpalu(8:-1:1)./(2*CpC(1:8)));
    end
end