component Enchangeur3branches

% Echangeur 3 branches
   
    nodes        
        inH  = simCryogenics.fluid; % inH:top
        outH = simCryogenics.fluid; % outH:bottom
        inM = simCryogenics.fluid ; % inM:top
        outM = simCryogenics.fluid ; % outM:bottom
        inC  = simCryogenics.fluid; % inC:bottom
        outC = simCryogenics.fluid; % outC:top
    end

     parameters
        N   = { 8     , '1'       }; % Number of elementary loop
        Vh  = { 2.3e-3, 'm^3'     }; % Hot pipe volume
        Vm = { 2.3e-3, 'm^3'     }    % Middle pipe volume
        Vc  = { 2.3e-3, 'm^3'     }; % Cold pipe volume
        M   = { 13    , 'kg'      }; % Masse of the aluminium
        Kh  = { 0   , 'bar*s/kg'}; % Drop in the hot pipe
        Km =  { 0   , 'bar*s/kg'}; % Dop in the middle pipe
        Kc  = { 0  , 'bar*s/kg'}; % Drop in the cold pipe
        hh_m   = { 400   , 'J/s/K'   }; % Exchange coefficient between the hot pipe and the middle pipe
        hh_c   = { 400   , 'J/s/K'   }; % Exchange coefficient between the hot pipe and the cold pipe
        hm_c   = { 400   , 'J/s/K'   }; % Exchange coefficient between the middle pipe and the cold pipe
        Ph0 = { 16    , 'bar'     }; % Initial hot pressure
        Th0 = { 10    , 'K'       }; % Initial hot temperature
        Pm0 = { 10    , 'bar'     }; % Initial middle pressure
        Tm0 = { 5    , 'K'       }; % Initial middle temperature
        Pc0 = { 1.1   , 'bar'     }; % Initial cold pressure
        Tc0 = { 4.5   , 'K'       }; % Initial cold temperature
        Mh0 = { 0.037*2 , 'kg/s'    }; % Initial hot mass flow
        Mm0 = { 0.037 , 'kg/s'    }; % Initial middle mass flow
        Mc0 = { 0.037 , 'kg/s'    }; % Initial cold mass flow 
        sensh = { 0 , '1'    }; % Sens hot  flow      
        sensm = { 1 , '1'    }; % Sens middle flow
        sensc = { 1 , '1'    }; % Sens cold flow
     end
    
    variables 
         % For the calculation of the temperature
        rhoH_H  = { zeros(8,1), 'kg/m^3'};
        rhoM_H  = { zeros(8,1), 'kg/m^3'};
        rhoC_H  = { zeros(8,1), 'kg/m^3'};

        % For the calculation of the mass flow
        rhoH_M = { zeros(9,1), 'kg/m^3'};
        rhoM_M = { zeros(9,1), 'kg/m^3'};
        rhoC_M = { zeros(9,1), 'kg/m^3'};

        THout  = { zeros(9,1), 'K'     };
        TMout  = { zeros(9,1), 'K'     };
        TCout  = { zeros(9,1), 'K'     };

        THoutbs  = { zeros(9,1), 'K'     };
        TMoutbs  = { zeros(9,1), 'K'     };
        TCoutbs  = { zeros(9,1), 'K'     };
    
        HHout  = { zeros(8,1), 'J/kg'  };
        HMout  = { zeros(8,1), 'J/kg'  };
        HCout  = { zeros(8,1), 'J/kg'  };
        
        HHin   = { zeros(1,1), 'J/kg'  };
        HMin   = { zeros(1,1), 'J/kg'  };
        HCin   = { zeros(1,1), 'J/kg'  };

        Q1      = { zeros(8,1), 'J/s'   };
        Q2      = { zeros(8,1), 'J/s'   };
        Q3      = { zeros(8,1), 'J/s'   }; 
        
        Qh    = { zeros(8,1), 'J/s'   };
        Qm    = { zeros(8,1), 'J/s'   };
        Qc    = { zeros(8,1), 'J/s'   };  
        
        CpH    = { zeros(8,1), 'J/kg/K'};
        CpM    = { zeros(8,1), 'J/kg/K'};
        CpC    = { zeros(8,1), 'J/kg/K'};

        Cpalu  = { zeros(8,1), 'J/kg/K'};

        dmh    = { zeros(8,1), 'kg/s'  };
        dmm    = { zeros(8,1), 'kg/s'  };
        dmc    = { zeros(8,1), 'kg/s'  };

        Mc     = { zeros(8,1), 'kg/s'  };
        Mm     = { zeros(8,1), 'kg/s'  };
        Mh     = { zeros(8,1), 'kg/s'  };

        Pc     = { zeros(8,1), 'bar'   };
        Pm     = { zeros(8,1), 'bar'   };
        Ph     = { zeros(8,1), 'bar'   };

        Cst    = { 1, '1'              }; % Constant for reduce the beginning derivate
    end

	function setup
        if N <= 0, error('discretization must be greater than zero'); end
        if Vh <= 0, error('Hot pipe volume must be greater than zero'); end
        if Vm <= 0, error('Middle pipe volume must be greater than zero'); end
        if Vc <= 0, error('Cold pipe volume must be greater than zero'); end
        if M <= 0, error('Mass of aluminium must be greater than zero'); end
        if Kh < 0, error('The loss of load coefficient in the hot pipe must be greater than zero or equal'); end
        if Km < 0, error('he loss of load coefficient in the hot pipe must be greater than zero or equal'); end
        if Kc < 0, error('he loss of load coefficient in the hot pipe must be greater than zero or equal'); end
        if hh_m <= 0, error('Exchange coefficiant between hot and middle pipes must be greater than 0'); end
        if hh_c <= 0, error('Exchange coefficiant between hot and cold pipes must be greater than 0'); end
        if hm_c <= 0, error('Exchange coefficiant between middle and cold pipes must be greater than 0'); end      
        if Ph0 <= 0, error('Initiale pressure of the hot pipe must be greater than 0'); end
        if Pm0 <= 0, error('Initiale pressure of the middle pipe must be greater than 0'); end    
        if Pm0 <= 0, error('Initiale pressure of the cold pipe must be greater than 0'); end    
        if Mh0 <= 0, error('Initiale flow rate in the hot pipe must be greater than 0'); end        
        if Mm0 <= 0, error('Initiale flow rate in the middle pipe must be greater than 0'); end    
        if Mc0 <= 0, error('Initiale flow rate in the cold pipe must be greater than 0'); end        
        if sensh ~= 0 && sensh ~=1, error('Sensh must be 1 or 0'); end  
        if sensm ~= 0 && sensm ~=1, error('Sensm must be 1 or 0'); end        
        if sensc ~= 0 && sensc ~=1, error('Sensc must be 1 or 0'); end

        f = @(Tt)ex_multizone_conti_centree_der_3b(	value(Th0,'K'),...
                                                    value(Tm0,'K'),...
                                                    value(Tc0,'K'),...
                                                    value(Mh0,'kg/s'),...
                                                    value(Mm0,'kg/s'),...
                                                    value(Mc0,'kg/s'),...
                                                    value(Ph0,'bar'),...
                                                    value(Pm0,'bar'),...
                                                    value(Pc0,'bar'),...
                                                    value(N,'1'),...
                                                    value(Vh,'m^3'),...
                                                    value(Vm,'m^3'),...
                                                    value(Vc,'m^3'),...
                                                    value(hh_m,'W/K'),...
                                                    value(hh_c,'W/K'),...
                                                    value(hm_c,'W/K'),...
                                                    value(sensh,'1'),...
                                                    value(sensm,'1'),...
                                                    value(sensc,'1'),...
                                                    value(M,'kg'),Tt);

        T(1:3:3*value(N,'1'),1) = linspace(value(Th0,'K')  ,value(Tc0,'K')+0.5,value(N,'1'))'; % init guess Th
        T(2:3:3*value(N,'1'),1) = linspace(value(Th0,'K')  ,value(Tm0,'K'),value(N,'1'))'; % init guess Tm
        T(3:3:3*value(N,'1'),1) = linspace(value(Th0,'K')-1,value(Tc0,'K'),value(N,'1'))'; % init guess Tc  

        opt = optimset('Display','off','TolFun',1e-10,'TolX',1e-10);
        T   = fsolve(f,T,opt);

        if (sensh == 0), HHout = {hecalc(9, 0, 'T', T(1:3:end) ,'P', value(Ph0,'Pa') , 0), 'J/kg'};
        else, HHout = {hecalc(9, 0, 'T', T(end-2:-3:1) ,'P', value(Ph0,'Pa') , 0), 'J/kg'}; end
        if (sensm == 0), HMout = {hecalc(9, 0, 'T', T(2:3:end-1) ,'P', value(Pm0,'Pa') , 0), 'J/kg'};
        else, HMout = {hecalc(9, 0, 'T', T(end-1:-3:2) ,'P', value(Pm0,'Pa') , 0), 'J/kg'}; end
        if (sensc == 0), HCout = {hecalc(9, 0, 'T', T(3:3:end),'P', value(Pc0,'Pa') , 0), 'J/kg'};
        else, HCout = {hecalc(9, 0, 'T', T(end:-3:3)   ,'P', value(Pc0,'Pa') , 0), 'J/kg'}; end
    end 

    equations
        if (sensh == 0) % hot pipe
            Ph(1)   == inH.P   - 0*Kh/N*Mh(8);
            Ph(2:8) == Ph(1:7) - 0*Kh/N*Mh(7:-1:1);
            inH.M  == Mh(8)
            outH.P == Ph(8);
            THoutbs(1:9) == THout(1:9);
            Mh(1)   == outH.M  + dmh(8);
            Mh(2:8) == Mh(1:7) + dmh(7:-1:1);
            Qh == -Q1(1:8) - Q2(1:8);
            HHin == inH.H;
            outH.H == HHout(8);
        else
            Ph(1)   == outH.P  + 0*Kh/N*Mh(8);
            Ph(2:8) == Ph(1:7) + 0*Kh/N*Mh(7:-1:1);    
            outH.M  == Mh(8)
            inH.P == Ph(8);
            THoutbs(1:9) == THout(9:-1:1);
            Mh(1)   == inH.M - dmh(1);
            Mh(2:8) == Mh(1:7)- dmh(2:8);
            Qh == -Q1(8:-1:1) - Q2(8:-1:1);
            HHin == outH.H;
            inH.H == HHout(8)
        end

        % rhoH properties for the calculation of H hot
        rhoH_H(1)  == tablelookup(inH.P_P_H, inH.H_P_H, inH.rho_P_H , Ph(1), (HHin + HHout(1))/2, interpolation=linear);
        rhoH_H(2)  == tablelookup(inH.P_P_H, inH.H_P_H, inH.rho_P_H , Ph(2), (HHout(1) + HHout(2))/2, interpolation=linear);
        rhoH_H(3)  == tablelookup(inH.P_P_H, inH.H_P_H, inH.rho_P_H , Ph(3), (HHout(2) + HHout(3))/2, interpolation=linear);
        rhoH_H(4)  == tablelookup(inH.P_P_H, inH.H_P_H, inH.rho_P_H , Ph(4), (HHout(3) + HHout(4))/2, interpolation=linear);
        rhoH_H(5)  == tablelookup(inH.P_P_H, inH.H_P_H, inH.rho_P_H , Ph(5), (HHout(4) + HHout(5))/2, interpolation=linear);
        rhoH_H(6)  == tablelookup(inH.P_P_H, inH.H_P_H, inH.rho_P_H , Ph(6), (HHout(5) + HHout(6))/2, interpolation=linear);
        rhoH_H(7)  == tablelookup(inH.P_P_H, inH.H_P_H, inH.rho_P_H , Ph(7), (HHout(6) + HHout(7))/2, interpolation=linear);
        rhoH_H(8)  == tablelookup(inH.P_P_H, inH.H_P_H, inH.rho_P_H , Ph(8), (HHout(7) + HHout(8))/2, interpolation=linear);
        
        % rhoH properties for the calculation of M hot
        rhoH_M(1)  == tablelookup(inH.P_P_H, inH.H_P_H, inH.rho_P_H , Ph(1), HHin, interpolation=linear);
        rhoH_M(2)  == tablelookup(inH.P_P_H, inH.H_P_H, inH.rho_P_H , Ph(2), HHout(1), interpolation=linear);
        rhoH_M(3)  == tablelookup(inH.P_P_H, inH.H_P_H, inH.rho_P_H , Ph(3), HHout(2), interpolation=linear);
        rhoH_M(4)  == tablelookup(inH.P_P_H, inH.H_P_H, inH.rho_P_H , Ph(4), HHout(3), interpolation=linear);
        rhoH_M(5)  == tablelookup(inH.P_P_H, inH.H_P_H, inH.rho_P_H , Ph(5), HHout(4), interpolation=linear);
        rhoH_M(6)  == tablelookup(inH.P_P_H, inH.H_P_H, inH.rho_P_H , Ph(6), HHout(5), interpolation=linear);
        rhoH_M(7)  == tablelookup(inH.P_P_H, inH.H_P_H, inH.rho_P_H , Ph(7), HHout(6), interpolation=linear);
        rhoH_M(8)  == tablelookup(inH.P_P_H, inH.H_P_H, inH.rho_P_H , Ph(8), HHout(7), interpolation=linear);
        rhoH_M(9)  == tablelookup(inH.P_P_H, inH.H_P_H, inH.rho_P_H , Ph(8), HHout(8), interpolation=linear);

        % THout properties for the calculation of Q
        THout(1) == tablelookup(inH.P_P_H, inH.H_P_H, inH.T_P_H, Ph(1), HHin, interpolation = linear);
        THout(2) == tablelookup(inH.P_P_H, inH.H_P_H, inH.T_P_H, Ph(2), HHout(1), interpolation = linear);
        THout(3) == tablelookup(inH.P_P_H, inH.H_P_H, inH.T_P_H, Ph(3), HHout(2), interpolation = linear);
        THout(4) == tablelookup(inH.P_P_H, inH.H_P_H, inH.T_P_H, Ph(4), HHout(3), interpolation = linear);
        THout(5) == tablelookup(inH.P_P_H, inH.H_P_H, inH.T_P_H, Ph(5), HHout(4), interpolation = linear);
        THout(6) == tablelookup(inH.P_P_H, inH.H_P_H, inH.T_P_H, Ph(6), HHout(5), interpolation = linear);
        THout(7) == tablelookup(inH.P_P_H, inH.H_P_H, inH.T_P_H, Ph(7), HHout(6), interpolation = linear);
        THout(8) == tablelookup(inH.P_P_H, inH.H_P_H, inH.T_P_H, Ph(8), HHout(7), interpolation = linear);
        THout(9) == tablelookup(inH.P_P_H, inH.H_P_H, inH.T_P_H, Ph(8), HHout(8), interpolation = linear);

        % CpH properties for calculation of H hot
        CpH(1)   == tablelookup(inH.T_T_P, inH.P_T_P, inH.Cp_T_P  , (THout(1) + THout(2))/2, Ph(1), interpolation=linear);
        CpH(2)   == tablelookup(inH.T_T_P, inH.P_T_P, inH.Cp_T_P  , (THout(2) + THout(3))/2, Ph(2), interpolation=linear);
        CpH(3)   == tablelookup(inH.T_T_P, inH.P_T_P, inH.Cp_T_P  , (THout(3) + THout(4))/2, Ph(3), interpolation=linear);
        CpH(4)   == tablelookup(inH.T_T_P, inH.P_T_P, inH.Cp_T_P  , (THout(4) + THout(5))/2, Ph(4), interpolation=linear);
        CpH(5)   == tablelookup(inH.T_T_P, inH.P_T_P, inH.Cp_T_P  , (THout(5) + THout(6))/2, Ph(5), interpolation=linear);
        CpH(6)   == tablelookup(inH.T_T_P, inH.P_T_P, inH.Cp_T_P  , (THout(6) + THout(7))/2, Ph(6), interpolation=linear);
        CpH(7)   == tablelookup(inH.T_T_P, inH.P_T_P, inH.Cp_T_P  , (THout(7) + THout(8))/2, Ph(7), interpolation=linear);
        CpH(8)   == tablelookup(inH.T_T_P, inH.P_T_P, inH.Cp_T_P  , (THout(8) + THout(9))/2, Ph(8), interpolation=linear); 

        if (sensm == 0) % Middle Pipe  
            Pm(1)   == inM.P  - 0*Km/N*Mm(8);
            Pm(2:8) == Pm(1:7) - 0*Km/N*Mm(7:-1:1);
            inM.M == Mm(8);
            outM.P  == Pm(8);
            TMoutbs(1:9) == TMout(1:9); 
            Mm(1)   == outM.M  + dmm(8);
            Mm(2:8) == Mm(1:7) + dmm(7:-1:1);
            Qm == +Q1(1:8) - Q3(1:8);
            HMin == inM.H;        
            outM.H == HMout(8);
        else
            Pm(1)   == outM.P  + 0*Km/N*Mm(8);
            Pm(2:8) == Pm(1:7) + 0*Km/N*Mm(7:-1:1);
            outM.M == Mm(8);
            inM.P  == Pm(8);
            TMoutbs(1:9) == TMout(9:-1:1);
            Mm(1)   == inM.M  - dmm(1);
            Mm(2:8) == Mm(1:7)- dmm(2:8);
            Qm == +Q1(8:-1:1) - Q3(8:-1:1);   
            HMin == outM.H;         
            inM.H == HMout(8);
        end
        
        
        
        % rhoM properties for the calculation of H middle
        rhoM_H(1)  == tablelookup(inM.P_P_H, inM.H_P_H, inM.rho_P_H , Pm(1), (HMin + HMout(1))/2, interpolation=linear);
        rhoM_H(2)  == tablelookup(inM.P_P_H, inM.H_P_H, inM.rho_P_H , Pm(2), (HMout(1) + HMout(2))/2, interpolation=linear);
        rhoM_H(3)  == tablelookup(inM.P_P_H, inM.H_P_H, inM.rho_P_H , Pm(3), (HMout(2) + HMout(3))/2, interpolation=linear);
        rhoM_H(4)  == tablelookup(inM.P_P_H, inM.H_P_H, inM.rho_P_H , Pm(4), (HMout(3) + HMout(4))/2, interpolation=linear);
        rhoM_H(5)  == tablelookup(inM.P_P_H, inM.H_P_H, inM.rho_P_H , Pm(5), (HMout(4) + HMout(5))/2, interpolation=linear);
        rhoM_H(6)  == tablelookup(inM.P_P_H, inM.H_P_H, inM.rho_P_H , Pm(6), (HMout(5) + HMout(6))/2, interpolation=linear);
        rhoM_H(7)  == tablelookup(inM.P_P_H, inM.H_P_H, inM.rho_P_H , Pm(7), (HMout(6) + HMout(7))/2, interpolation=linear);
        rhoM_H(8)  == tablelookup(inM.P_P_H, inM.H_P_H, inM.rho_P_H , Pm(8), (HMout(7) + HMout(8))/2, interpolation=linear);

        %rhoM properties for the calculation of M middle
        rhoM_M(1)  == tablelookup(inM.P_P_H, inM.H_P_H, inM.rho_P_H , Pm(1), HMin  , interpolation=linear);
        rhoM_M(2)  == tablelookup(inM.P_P_H, inM.H_P_H, inM.rho_P_H , Pm(2), HMout(1), interpolation=linear);
        rhoM_M(3)  == tablelookup(inM.P_P_H, inM.H_P_H, inM.rho_P_H , Pm(3), HMout(2), interpolation=linear);
        rhoM_M(4)  == tablelookup(inM.P_P_H, inM.H_P_H, inM.rho_P_H , Pm(4), HMout(3), interpolation=linear);
        rhoM_M(5)  == tablelookup(inM.P_P_H, inM.H_P_H, inM.rho_P_H , Pm(5), HMout(4), interpolation=linear);
        rhoM_M(6)  == tablelookup(inM.P_P_H, inM.H_P_H, inM.rho_P_H , Pm(6), HMout(5), interpolation=linear);
        rhoM_M(7)  == tablelookup(inM.P_P_H, inM.H_P_H, inM.rho_P_H , Pm(7), HMout(6), interpolation=linear);
        rhoM_M(8)  == tablelookup(inM.P_P_H, inM.H_P_H, inM.rho_P_H , Pm(8), HMout(7), interpolation=linear);
        rhoM_M(9)  == tablelookup(inM.P_P_H, inM.H_P_H, inM.rho_P_H , Pm(8), HMout(8), interpolation=linear);

        % TMout properties for the calculation of Q
        TMout(1) == tablelookup(inM.P_P_H, inM.H_P_H, inM.T_P_H, Pm(1), HMin   , interpolation = linear);
        TMout(2) == tablelookup(inM.P_P_H, inM.H_P_H, inM.T_P_H, Pm(2), HMout(1), interpolation = linear);
        TMout(3) == tablelookup(inM.P_P_H, inM.H_P_H, inM.T_P_H, Pm(3), HMout(2), interpolation = linear);
        TMout(4) == tablelookup(inM.P_P_H, inM.H_P_H, inM.T_P_H, Pm(4), HMout(3), interpolation = linear);
        TMout(5) == tablelookup(inM.P_P_H, inM.H_P_H, inM.T_P_H, Pm(5), HMout(4), interpolation = linear);
        TMout(6) == tablelookup(inM.P_P_H, inM.H_P_H, inM.T_P_H, Pm(6), HMout(5), interpolation = linear);
        TMout(7) == tablelookup(inM.P_P_H, inM.H_P_H, inM.T_P_H, Pm(7), HMout(6), interpolation = linear);
        TMout(8) == tablelookup(inM.P_P_H, inM.H_P_H, inM.T_P_H, Pm(8), HMout(7), interpolation = linear);
        TMout(9) == tablelookup(inM.P_P_H, inM.H_P_H, inM.T_P_H, Pm(8), HMout(8), interpolation = linear);

        %CpH properties for calculation of H middle
        CpM(1)   == tablelookup(inM.T_T_P, inM.P_T_P, inM.Cp_T_P  , (TMout(1) + TMout(2))/2, Pm(1), interpolation=linear);
        CpM(2)   == tablelookup(inM.T_T_P, inM.P_T_P, inM.Cp_T_P  , (TMout(2) + TMout(3))/2, Pm(2), interpolation=linear);
        CpM(3)   == tablelookup(inM.T_T_P, inM.P_T_P, inM.Cp_T_P  , (TMout(3) + TMout(4))/2, Pm(3), interpolation=linear);
        CpM(4)   == tablelookup(inM.T_T_P, inM.P_T_P, inM.Cp_T_P  , (TMout(4) + TMout(5))/2, Pm(4), interpolation=linear);
        CpM(5)   == tablelookup(inM.T_T_P, inM.P_T_P, inM.Cp_T_P  , (TMout(5) + TMout(6))/2, Pm(5), interpolation=linear);
        CpM(6)   == tablelookup(inM.T_T_P, inM.P_T_P, inM.Cp_T_P  , (TMout(6) + TMout(7))/2, Pm(7), interpolation=linear);
        CpM(7)   == tablelookup(inM.T_T_P, inM.P_T_P, inM.Cp_T_P  , (TMout(7) + TMout(8))/2, Pm(8), interpolation=linear);
        CpM(8)   == tablelookup(inM.T_T_P, inM.P_T_P, inM.Cp_T_P  , (TMout(8) + TMout(9))/2, Pm(8), interpolation=linear);            

        if (sensc == 0) % Cold Pipe
            Pc(1)   == inC.P  - 0*Kc/N*Mc(8);
            Pc(2:8) == Pc(1:7) - 0*Kc/N*Mc(7:-1:1);
            inC.M == Mc(8);
            outC.P  == Pc(8);
            TCoutbs(1:9) == TCout(1:9);
            Mc(1)   == outC.M  + dmc(8); 
            Mc(2:8) == Mc(1:7) + dmc(7:-1:1);
            Qc == +Q2(1:8) + Q3(1:8);
            HCin == outC.H;
            inC.H == HCout(8);
        else
            Pc(1)   == outC.P  + 0*Kc/N*Mc(8);
            Pc(2:8) == Pc(1:7) + 0*Kc/N*Mc(7:-1:1);
            outC.M == Mc(8);
            inC.P  == Pc(8);
            TCoutbs(1:9) == TCout(9:-1:1);
            Mc(1)   == inC.M  - dmc(1); 
            Mc(2:8) == Mc(1:7)- dmc(2:8);
            Qc == +Q2(8:-1:1) + Q3(8:-1:1);
            HCin == inC.H;
            outC.H == HCout(8);
        end
        
        % rhoC properties for calculation of H cold
        rhoC_H(1)  == tablelookup(inC.P_P_H, inC.H_P_H, inC.rho_P_H, Pc(1), (HCin    + HCout(1))/2, interpolation=linear);
        rhoC_H(2)  == tablelookup(inC.P_P_H, inC.H_P_H, inC.rho_P_H, Pc(2), (HCout(1) + HCout(2))/2, interpolation=linear);
        rhoC_H(3)  == tablelookup(inC.P_P_H, inC.H_P_H, inC.rho_P_H, Pc(3), (HCout(2) + HCout(3))/2, interpolation=linear);
        rhoC_H(4)  == tablelookup(inC.P_P_H, inC.H_P_H, inC.rho_P_H, Pc(4), (HCout(3) + HCout(4))/2, interpolation=linear);
        rhoC_H(5)  == tablelookup(inC.P_P_H, inC.H_P_H, inC.rho_P_H, Pc(5), (HCout(4) + HCout(5))/2, interpolation=linear);
        rhoC_H(6)  == tablelookup(inC.P_P_H, inC.H_P_H, inC.rho_P_H, Pc(6), (HCout(5) + HCout(6))/2, interpolation=linear);
        rhoC_H(7)  == tablelookup(inC.P_P_H, inC.H_P_H, inC.rho_P_H, Pc(7), (HCout(6) + HCout(7))/2, interpolation=linear);
        rhoC_H(8)  == tablelookup(inC.P_P_H, inC.H_P_H, inC.rho_P_H, Pc(8), (HCout(7) + HCout(8))/2, interpolation=linear);

        % rhoC properties for calculation of M cold
        rhoC_M(1)  == tablelookup(inC.P_P_H, inC.H_P_H, inC.rho_P_H, Pc(1), HCin   , interpolation=linear);
        rhoC_M(2)  == tablelookup(inC.P_P_H, inC.H_P_H, inC.rho_P_H, Pc(2), HCout(1), interpolation=linear);
        rhoC_M(3)  == tablelookup(inC.P_P_H, inC.H_P_H, inC.rho_P_H, Pc(3), HCout(2), interpolation=linear);
        rhoC_M(4)  == tablelookup(inC.P_P_H, inC.H_P_H, inC.rho_P_H, Pc(4), HCout(3), interpolation=linear);
        rhoC_M(5)  == tablelookup(inC.P_P_H, inC.H_P_H, inC.rho_P_H, Pc(5), HCout(4), interpolation=linear);
        rhoC_M(6)  == tablelookup(inC.P_P_H, inC.H_P_H, inC.rho_P_H, Pc(6), HCout(5), interpolation=linear);
        rhoC_M(7)  == tablelookup(inC.P_P_H, inC.H_P_H, inC.rho_P_H, Pc(7), HCout(6), interpolation=linear);
        rhoC_M(8)  == tablelookup(inC.P_P_H, inC.H_P_H, inC.rho_P_H, Pc(8), HCout(7), interpolation=linear);
        rhoC_M(9)  == tablelookup(inC.P_P_H, inC.H_P_H, inC.rho_P_H, Pc(8), HCout(8), interpolation=linear);

        % TCout properties for the calculation of Q        
        TCout(1) == tablelookup(inC.P_P_H, inC.H_P_H, inC.T_P_H, Pc(1), HCin   , interpolation = linear);
        TCout(2) == tablelookup(inC.P_P_H, inC.H_P_H, inC.T_P_H, Pc(2), HCout(1), interpolation = linear);
        TCout(3) == tablelookup(inC.P_P_H, inC.H_P_H, inC.T_P_H, Pc(3), HCout(2), interpolation = linear);
        TCout(4) == tablelookup(inC.P_P_H, inC.H_P_H, inC.T_P_H, Pc(4), HCout(3), interpolation = linear);
        TCout(5) == tablelookup(inC.P_P_H, inC.H_P_H, inC.T_P_H, Pc(5), HCout(4), interpolation = linear);
        TCout(6) == tablelookup(inC.P_P_H, inC.H_P_H, inC.T_P_H, Pc(6), HCout(5), interpolation = linear);
        TCout(7) == tablelookup(inC.P_P_H, inC.H_P_H, inC.T_P_H, Pc(7), HCout(6), interpolation = linear);
        TCout(8) == tablelookup(inC.P_P_H, inC.H_P_H, inC.T_P_H, Pc(8), HCout(7), interpolation = linear);
        TCout(9) == tablelookup(inC.P_P_H, inC.H_P_H, inC.T_P_H, Pc(8), HCout(8), interpolation = linear);

        % CpC properties for calculation of T cold
        CpC(1)   == tablelookup(inC.T_T_P, inC.P_T_P, inC.Cp_T_P, (TCout(1) + TCout(2))/2, Pc(1), interpolation=linear);
        CpC(2)   == tablelookup(inC.T_T_P, inC.P_T_P, inC.Cp_T_P, (TCout(2) + TCout(3))/2, Pc(2), interpolation=linear);
        CpC(3)   == tablelookup(inC.T_T_P, inC.P_T_P, inC.Cp_T_P, (TCout(3) + TCout(4))/2, Pc(3), interpolation=linear);
        CpC(4)   == tablelookup(inC.T_T_P, inC.P_T_P, inC.Cp_T_P, (TCout(4) + TCout(5))/2, Pc(4), interpolation=linear);
        CpC(5)   == tablelookup(inC.T_T_P, inC.P_T_P, inC.Cp_T_P, (TCout(5) + TCout(6))/2, Pc(5), interpolation=linear);
        CpC(6)   == tablelookup(inC.T_T_P, inC.P_T_P, inC.Cp_T_P, (TCout(6) + TCout(7))/2, Pc(6), interpolation=linear);
        CpC(7)   == tablelookup(inC.T_T_P, inC.P_T_P, inC.Cp_T_P, (TCout(7) + TCout(8))/2, Pc(7), interpolation=linear);
        CpC(8)   == tablelookup(inC.T_T_P, inC.P_T_P, inC.Cp_T_P, (TCout(8) + TCout(9))/2, Pc(8), interpolation=linear);

        Cpalu(1) == tablelookup(inH.Th_Tc, inH.Cpalum_Th_Tc, (THoutbs(1) + THoutbs(2) + TMoutbs(1) + TMoutbs(2) + TCoutbs(1) + TCoutbs(2))/6, interpolation=cubic);
        Cpalu(2) == tablelookup(inH.Th_Tc, inH.Cpalum_Th_Tc, (THoutbs(2) + THoutbs(3) + TMoutbs(2) + TMoutbs(3) + TCoutbs(2) + TCoutbs(3))/6, interpolation=cubic);
        Cpalu(3) == tablelookup(inH.Th_Tc, inH.Cpalum_Th_Tc, (THoutbs(3) + THoutbs(4) + TMoutbs(3) + TMoutbs(4) + TCoutbs(3) + TCoutbs(4))/6, interpolation=cubic);
        Cpalu(4) == tablelookup(inH.Th_Tc, inH.Cpalum_Th_Tc, (THoutbs(4) + THoutbs(5) + TMoutbs(4) + TMoutbs(5) + TCoutbs(4) + TCoutbs(5))/6, interpolation=cubic);
        Cpalu(5) == tablelookup(inH.Th_Tc, inH.Cpalum_Th_Tc, (THoutbs(5) + THoutbs(6) + TMoutbs(5) + TMoutbs(6) + TCoutbs(5) + TCoutbs(6))/6, interpolation=cubic);
        Cpalu(6) == tablelookup(inH.Th_Tc, inH.Cpalum_Th_Tc, (THoutbs(6) + THoutbs(7) + TMoutbs(6) + TMoutbs(7) + TCoutbs(6) + TCoutbs(7))/6, interpolation=cubic);
        Cpalu(7) == tablelookup(inH.Th_Tc, inH.Cpalum_Th_Tc, (THoutbs(7) + THoutbs(8) + TMoutbs(7) + TMoutbs(8) + TCoutbs(7) + TCoutbs(8))/6, interpolation=cubic);
        Cpalu(8) == tablelookup(inH.Th_Tc, inH.Cpalum_Th_Tc, (THoutbs(8) + THoutbs(9) + TMoutbs(8) + TMoutbs(9) + TCoutbs(8) + TCoutbs(9))/6, interpolation=cubic);

        Q1(1:8) == (THoutbs(1:8) + THoutbs(2:9) - TMoutbs(1:8) - TMoutbs(2:9))*hh_m/(2*N);
        Q2(1:8) == (THoutbs(1:8) + THoutbs(2:9) - TCoutbs(1:8) - TCoutbs(2:9))*hh_c/(2*N);
        Q3(1:8) == (TMoutbs(1:8) + TMoutbs(2:9) - TCoutbs(1:8) - TCoutbs(2:9))*hm_c/(2*N);

        HHout(1:8).der == N*(outH.M*([HHin;HHout(1:7)] - HHout(1:8)) + Qh)./(rhoH_H(1:8) * Vh + M*Cpalu(8:-1:1)./(2*CpH(1:8)));
        HMout(1:8).der == N*(outM.M*([HMin;HMout(1:7)] - HMout(1:8)) + Qm)./(rhoM_H(1:8) * Vm + M*Cpalu(8:-1:1)./(2*CpM(1:8))); 
        HCout(1:8).der == N*(outC.M*([HCin;HCout(1:7)] - HCout(1:8)) + Qc)./(rhoC_H(1:8) * Vc + M*Cpalu(8:-1:1)./(2*CpC(1:8)));

       if(time<{10,'s'})
            Cst == time/{10,'s'};
       else
            Cst == 1;
       end

        dmh(1:8) == 0*Cst*(rhoH_M(2:9) - rhoH_M(1:8))./(HHout(1:8) - [HHin;HHout(1:7)]) * Vh.* (outH.M*([HHin;HHout(1:7)] - HHout(1:8)) - Q1(1:8) -    Q2(1:8))   ./(rhoH_H(1:8) * Vh + M*Cpalu(1:8)   ./(2*CpH(1:8)));
        dmm(1:8) == 0*Cst*(rhoM_M(2:9) - rhoM_M(1:8))./(HMout(1:8) - [HMin;HMout(1:7)]) * Vm.* (outM.M*([HMin;HMout(1:7)] - HMout(1:8)) - Q3(8:-1:1) + Q1(8:-1:1))./(rhoM_H(1:8) * Vm + M*Cpalu(8:-1:1)./(2*CpM(1:8)));        
        dmc(1:8) == 0*Cst*(rhoC_M(2:9) - rhoC_M(1:8))./(HCout(1:8) - [HCin;HCout(1:7)]) * Vc.* (outC.M*([HCin;HCout(1:7)] - HCout(1:8)) + Q2(8:-1:1) + Q3(8:-1:1))./(rhoC_H(1:8) * Vc + M*Cpalu(8:-1:1)./(2*CpC(1:8)));
    end
end