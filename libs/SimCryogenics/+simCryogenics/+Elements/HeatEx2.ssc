component (Propagation=blocks) HeatEx2 
%     HX2
%
%     This component is a two branches cross-current heat Exchanger
%     
%     The following variables are imposed to others components:
%       - in1 node : flow rate
%       - out1 node : pressure and enthalpy 
%       - in2 node : enthalpy and flow rate
%       - out2 node : pressure
%     
%     To ensure compilation, the heat Exchanger must be connected
%     to components nodes that impose:
%     - pressure and enthalpy on the in1 node
%     - flowrate on the out1 node
%     - flowrate and enthalpy on the in2 node
%     - pressure on the out2 node
%     
%     Note : the initial temperature/flowrate/presure conditions should
%     be equal to the actual value on the scheme (especially for heat
%     exchangers connected to sources).
%     
%     All parameters must be positive
    nodes        
        out2 = simCryogenics.fluid; % out2:top
        in1  = simCryogenics.fluid; % in1:top
        in2  = simCryogenics.fluid; % in2:bottom
        out1 = simCryogenics.fluid; % out1:bottom
    end
    
    parameters
        N   = { 6     , '1'       }; % Number of discrete elements
        Vh  = { 2.3e-3, 'm^3'     }; % First passage volume
        Vc  = { 2.3e-3, 'm^3'     }; % Sec. passage volume
        M   = { 13    , 'kg'      }; % Heat exchanger mass
        Kh  = { 0.6   , 'bar*s/kg'}; % First passage press. drop coeff.
        Kc  = { 0.35  , 'bar*s/kg'}; % Sec. passage press. drop coeff.
        h   = { 480   , 'J/s/K'   }; % Exchange coefficient
        Th0 = { 10    , 'K'       }; % Initial in1 temperature
        Ph0 = { 16    , 'bar'     }; % Initial in1 pressure
        Mh0 = { 0.037 , 'kg/s'    }; % Initial out1 flowrate   
        Tc0 = { 4.5   , 'K'       }; % Initial in2 temperature
        Pc0 = { 1.1   , 'bar'     }; % Initial out2 pressure
        Mc0 = { 0.037 , 'kg/s'    }; % Initial in2 flowrate    
    end

     components (Hidden=true)
         e1 = simCryogenics.Elements.Tuy1D(V=Vh, M=M/2, K=Kh, N=N, sens=0 );
         e2 = simCryogenics.Elements.Tuy1D(V=Vc, M=M/2, K=Kc, N=N, sens=1 );
         q1 = simCryogenics.Elements.HeatEx2_exchange(h=h,N=N);
     end

     function setup
        if N < 1 || N > 10,
            error('The number of elementary loop must be between 1 and 10');
        end

        if Vh <= 0 || Vc <= 0 || M < 0 || Kh < 0 || Kc < 0 || h < 0
            error('All component phyical parameters must be positive');
        end

        if Ph0 < in1.P_min, error('Initial pressure of the first passage must be higher than P_min'); end
        if Pc0 < in2.P_min, error('Initial pressure of the third passage must be higher than P_min'); end    
        
        if Ph0 > in1.P_max, error('Initial pressure of the first passage must be lower than P_max'); end
        if Pc0 > in2.P_max, error('Initial pressure of the s passage must be lower than P_max'); end 

        if Th0 < in1.T_min, error('Initial temperature of the first passage must be higher than T_min'); end
        if Tc0 < in2.T_min, error('Initial temperature of the second passage must be higher than T_min'); end    
        
        if Th0 > in1.T_max, error('Initial enthalpy of the first passage must be lower than T_max'); end
        if Tc0 > in2.T_max, error('Initial enthalpy of the second passage must be lower than T_max'); end    
        
        if Mh0 < 0, error('Initial flowrate in the first passage must be greater than 0'); end        
        if Mc0 < 0, error('Initial flowrate in the second passage must be greater than 0'); end  
        
        f = @(Tt)ex_multizone_conti_centree_der(    value(Th0,'K'),...
                                                    value(Tc0,'K'),...
                                                    value(Mh0,'kg/s'),...
                                                    value(Mc0,'kg/s'),...
                                                    value(Ph0,'bar'),...
                                                    value(Pc0,'bar'),...
                                                    value(N,'1'),...
                                                    value(Vh,'m^3'),...
                                                    value(Vc,'m^3'),...
                                                    value(h,'W/K'),...
                                                    value(M,'kg'),...
                                                    value(in1.gas,'1'),...
                                                    value(in2.gas,'1'), Tt );
                                        
        T(1:2:2*value(N,'1'),1) = linspace(value(Th0,'K')  ,value(Tc0,'K')+0.5,value(N,'1'))'; % init guess Th
        T(2:2:2*value(N,'1'),1) = linspace(value(Th0,'K')-1,value(Tc0,'K')    ,value(N,'1'))'; % init guess Tc  
        
        opt = optimset('Display','off','TolFun',1e-10,'TolX',1e-10);
        T   = fsolve(f,T,opt);
        
        e1.Hout0  = {[T_P_to_H(T(1:+2:end),value(Ph0,'bar'),value(in1.gas,'1')); zeros(10-value(N,'1'),1)], 'J/kg'};
        e2.Hout0  = {[T_P_to_H(T(end:-2:1),value(Pc0,'bar'),value(in2.gas,'1')); zeros(10-value(N,'1'),1)], 'J/kg'};

     end
     
     connections
        connect(in1, e1.in1);	connect(e1.out1, out1) ;
        connect(out2, e2.out1);	connect(e2.in1, in2) ; 
        connect(q1.Q1, e1.Q)
        connect(q1.Q2, e2.Q) 
       	connect(e1.T, q1.T1)
        connect(e2.T, q1.T2) 
     end
    
end